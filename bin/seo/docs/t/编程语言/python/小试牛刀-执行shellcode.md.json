{
  "keywords": ["Python JIT", "机器代码", "JIT编译", "补丁", "运行时", "字节码", "mmap", "objdump", "gcc", "可执行内存", "反向工程", "汇编代码", "Python性能优化", "Linux", "C语言"],
  "description": "本文总结了对Python JIT的研究过程，深入探讨了Python JIT如何通过在运行时执行机器代码（以补丁形式）来优化性能。文章包含了从编译C代码生成机器码，到在Linux系统上使用mmap分配可执行内存并执行机器码的完整示例，并最终通过一个简单的加法运算演示了整个过程。",
  "title": "Python JIT 原理详解：运行时机器代码补丁与实践"
}
