import{_ as n}from"./chunks/gzh.V6JpXJj4.js";import{_ as a,c as i,a3 as e,o as t}from"./chunks/framework.BOyF8YV7.js";const d=JSON.parse('{"title":"Python内核核心数据结构：PyObject详解及源码分析","description":"深入探讨Python内核中最重要的数据结构PyObject和PyVarObject，分析其C语言源码实现，包括引用计数、类型对象等关键字段，并简要介绍其在Python数据类型中的应用。文章旨在引出PyObject，后续将深入分析各种Python数据结构的底层实现。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/python/Python内核源码解析/底层基础数据结构PyObject.html"}],["meta",{"property":"og:title","title":"Python内核核心数据结构：PyObject详解及源码分析"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/python/Python内核源码解析/底层基础数据结构PyObject.html"}],["meta",{"name":"keywords","content":"Python,PyObject,PyVarObject,数据结构,底层实现,内核,引用计数,ob_refcnt,ob_type,ob_size,C语言,源码分析,Python源码,编程语言,算法,typeobject,PyObject_VAR_HEAD,_PyObject_HEAD_EXTRA,双向链表"}]]},"headers":[],"relativePath":"t/编程语言/python/Python内核源码解析/底层基础数据结构PyObject.md","filePath":"t/编程语言/python/Python内核源码解析/底层基础数据结构PyObject.md","lastUpdated":1736299776000}'),p={name:"t/编程语言/python/Python内核源码解析/底层基础数据结构PyObject.md"};function l(h,s,r,c,k,b){return t(),i("div",null,s[0]||(s[0]=[e(`<p>Python 内核中最常见的数据结构就是 PyObject，它也是最重要的数据结构，Python 数据类型最底层的数据结构，int、string、float、boolean、list、set、hash 等都是基于这个数据结构来扩展的。PyObject 是定长对象，PyVarObject 是变长对象。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Nothing is actually declared to be a PyObject, but every pointer to</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * a Python object can be cast to a PyObject*.  This is inheritance built</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * by hand.  Similarly every pointer to a variable-size Python object can,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * in addition, be cast to PyVarObject*.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _object {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _PyObject_HEAD_EXTRA</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Py_ssize_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ob_refcnt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyTypeObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ob_type;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} PyObject;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject ob_base;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Py_ssize_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ob_size;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* Number of items in variable part */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} PyVarObject;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这篇文章主要是为了引入 PyObject，至于 Python 数据结构的底层实现不做详解解析，后面会针对每一种数据结构做详细的分析。</p><p>PyObject 的数据结构可以在内核源码<code>Include/cpython/object.h</code>中找到。</p><p>PyObject 是一个双向链表结构，<code>_PyObject_HEAD_EXTRA</code>定义了 next 和 prev 指针。ob_refcnt 为引用计数器，调用一次引用计数器加一，使用完计数器减一，为 0 后所占用的内存块会被释放。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* PyTypeObject structure is defined in cpython/object.h.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   In Py_LIMITED_API, PyTypeObject is an opaque structure. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _typeobject PyTypeObject;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// If this structure is modified, Doc/includes/typestruct.h should be updated</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// as well.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _typeobject {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject_VAR_HEAD</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tp_name;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* For printing, in format &quot;&lt;module&gt;.&lt;name&gt;&quot; */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Py_ssize_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tp_basicsize, tp_itemsize;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* For allocation */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ... </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* PyObject_VAR_HEAD defines the initial segment of all variable-size</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * container objects.  These end with a declaration of an array with 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * element, but enough space is malloc&#39;ed so that the array actually</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * has room for ob_size elements.  Note that ob_size is an element count,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * not necessarily a byte count.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PyObject_VAR_HEAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      PyVarObject ob_base;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><code>_typeobject</code>中的<code>PyObject_VAR_HEAD</code>是一个变长对象，相比 PyObject 多了一个 ob_size，表示变长部分的元素个数。</p><p>还有些字段对于不同的数据类型有其不同的作用，这里不展开分析。</p><p>编程语言离不开算法和数据结构，数据结构尤为重要，好的数据结构设计让我们的开发工作事半功倍，好的数据结构可以让算法的实现变得简单，也可以让算法的效率变得更高。Python 内核中的数据结构设计的非常好，这也是 Python 能够快速发展的一个重要原因。</p><p><i>本人热衷于编程语言底层实现原理。通过一些空闲时间阅读源码，记录自己的所学及心得。你的关注和鼓励是对我持续输出分享的动力，感谢，共同进步。</i></p><p><img src="`+n+'" alt="公众号"></p>',11)]))}const E=a(p,[["render",l]]);export{d as __pageData,E as default};
