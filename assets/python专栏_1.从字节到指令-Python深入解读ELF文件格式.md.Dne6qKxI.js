import{_ as s,c as a,a3 as p,o as e}from"./chunks/framework.BOyF8YV7.js";const u=JSON.parse('{"title":"Python 揭秘 ELF 文件：从字节到指令，玩转二进制世界！","description":"深入浅出地讲解 Python 如何解读 ELF 文件格式，涵盖 ELF 头部、程序头表、节头表、.text、.data、.bss、.symtab、.strtab 等关键部分，助你理解可执行文件的内部结构，提升系统编程和逆向工程技能。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/python专栏/1.从字节到指令-Python深入解读ELF文件格式.html"}],["meta",{"property":"og:title","title":"Python 揭秘 ELF 文件：从字节到指令，玩转二进制世界！"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/python专栏/1.从字节到指令-Python深入解读ELF文件格式.html"}],["meta",{"name":"keywords","content":"Python,ELF,ELF文件格式,可执行文件,程序头表,段,节,节头表,符号表,字符串表,深入解读,逆向工程,系统编程,二进制文件"}]]},"headers":[],"relativePath":"python专栏/1.从字节到指令-Python深入解读ELF文件格式.md","filePath":"python专栏/1.从字节到指令-Python深入解读ELF文件格式.md","lastUpdated":1736299776000}'),l={name:"python专栏/1.从字节到指令-Python深入解读ELF文件格式.md"};function i(r,n,t,c,b,o){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="从字节到指令-python-深入解读-elf-文件格式" tabindex="-1">从字节到指令:Python 深入解读 ELF 文件格式 <a class="header-anchor" href="#从字节到指令-python-深入解读-elf-文件格式" aria-label="Permalink to &quot;从字节到指令:Python 深入解读 ELF 文件格式&quot;">​</a></h1><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+-----------------------------+</span></span>
<span class="line"><span>|         ELF Header          |</span></span>
<span class="line"><span>|  (Elf32_Ehdr / Elf64_Ehdr)   |</span></span>
<span class="line"><span>+-----------------------------+</span></span>
<span class="line"><span>|      |                  |</span></span>
<span class="line"><span>|      V                  V</span></span>
<span class="line"><span>+-----------------------------+    +----------------------------+</span></span>
<span class="line"><span>|    Program Header Table    |----| Program Segment 1 (PT_LOAD) |</span></span>
<span class="line"><span>|  (Array of Elf32_Phdr/    |    +----------------------------+</span></span>
<span class="line"><span>|  Elf64_Phdr structures)   |----| Program Segment 2 (PT_LOAD) |</span></span>
<span class="line"><span>+-----------------------------+    +----------------------------+</span></span>
<span class="line"><span>|      |                  |  ... | Program Segment ...         |</span></span>
<span class="line"><span>|      V                  V      +----------------------------+</span></span>
<span class="line"><span>+-----------------------------+    +----------------------------+</span></span>
<span class="line"><span>|      Section 1  (.text)   |----|  .text Section Data         |</span></span>
<span class="line"><span>+-----------------------------+    +----------------------------+</span></span>
<span class="line"><span>|      Section 2  (.data)   |----|  .data Section Data         |</span></span>
<span class="line"><span>+-----------------------------+    +----------------------------+</span></span>
<span class="line"><span>|      Section 3  (.bss)    |----|  (No Data in File, Memory  )|</span></span>
<span class="line"><span>+-----------------------------+    |  Allocation at Runtime)   |</span></span>
<span class="line"><span>|      Section 4  (.rodata)  |----|  .rodata Section Data        |</span></span>
<span class="line"><span>+-----------------------------+    +----------------------------+</span></span>
<span class="line"><span>|      Section 5  (.symtab)  |----|  .symtab Section Data        |</span></span>
<span class="line"><span>+-----------------------------+    +----------------------------+</span></span>
<span class="line"><span>|      Section 6  (.strtab)  |----|  .strtab Section Data       |</span></span>
<span class="line"><span>+-----------------------------+    +----------------------------+</span></span>
<span class="line"><span>|      ...                   | ... |  ...                      |</span></span>
<span class="line"><span>+-----------------------------+    +----------------------------+</span></span>
<span class="line"><span>|    Section Header Table     |     (Section Header Table Entries)|</span></span>
<span class="line"><span>|  (Array of Elf32_Shdr /     |     (Elf32_Shdr / Elf64_Shdr    )|</span></span>
<span class="line"><span>|  Elf64_Shdr structures)    |     (Point to corresponding Section)</span></span>
<span class="line"><span>+-----------------------------+</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+---------------------------+</span></span>
<span class="line"><span>| ELF Header                |  &lt;-- Magic Number, Type, Entry Point, etc.</span></span>
<span class="line"><span>+---------------------------+</span></span>
<span class="line"><span>| Program Header Table      |  &lt;-- Describes memory layout for execution</span></span>
<span class="line"><span>+---------------------------+</span></span>
<span class="line"><span>| Section Header Table      |  &lt;-- Describes sections like .text, .data, etc.</span></span>
<span class="line"><span>+---------------------------+</span></span>
<span class="line"><span>| Section 1: .text          |  &lt;-- Code segment</span></span>
<span class="line"><span>+---------------------------+</span></span>
<span class="line"><span>| Section 2: .data          |  &lt;-- Initialized data segment</span></span>
<span class="line"><span>+---------------------------+</span></span>
<span class="line"><span>| Section 3: .bss           |  &lt;-- Uninitialized data segment</span></span>
<span class="line"><span>+---------------------------+</span></span>
<span class="line"><span>| Section n: .symtab        |  &lt;-- Symbol table (for linking)</span></span>
<span class="line"><span>+---------------------------+</span></span>
<span class="line"><span>| Section n+1: .strtab      |  &lt;-- String table (for symbol names)</span></span>
<span class="line"><span>+---------------------------+</span></span>
<span class="line"><span>| (Optional) Debug Sections |  &lt;-- Debugging info (.debug, .line, etc.)</span></span>
<span class="line"><span>+---------------------------+</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>`,3)]))}const d=s(l,[["render",i]]);export{u as __pageData,d as default};
