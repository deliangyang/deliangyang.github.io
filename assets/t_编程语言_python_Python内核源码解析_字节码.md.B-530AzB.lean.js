import{_ as i,c as a,a3 as n,o as l}from"./chunks/framework.BOyF8YV7.js";const g=JSON.parse('{"title":"深入Python内核：从字节码分析开始理解Python运行机制","description":"本文分析了学习Python内核时为何要从字节码分析入手，详细解释了Python字节码的结构、指令类型（如加载和存储指令、栈操作指令、控制流指令等）以及指令参数的作用，并通过例子和代码片段深入浅出地讲解了字节码的运行机制。理解字节码有助于深入理解Python的执行引擎和运行机制。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/python/Python内核源码解析/字节码.html"}],["meta",{"property":"og:title","title":"深入Python内核：从字节码分析开始理解Python运行机制"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/python/Python内核源码解析/字节码.html"}],["meta",{"name":"keywords","content":"Python,字节码,Python内核,opcode,LOAD_CONST,STORE_NAME,Python3.10.7,中间语言,执行引擎,运行机制,汇编指令,指令参数,LOAD_GLOBAL,CALL_FUNCTION,STORE_FAST,POP_TOP,RETURN_VALUE,dis,co_code,字节码分析,SEO优化"}]]},"headers":[],"relativePath":"t/编程语言/python/Python内核源码解析/字节码.md","filePath":"t/编程语言/python/Python内核源码解析/字节码.md","lastUpdated":1736299776000}'),p={name:"t/编程语言/python/Python内核源码解析/字节码.md"};function h(k,s,t,e,E,r){return l(),a("div",null,s[0]||(s[0]=[n(`<p>在分析学习 Python 内核的时候，为什么选择先从字节码分析开始？因为字节码是 Python 的中间语言，也是 Python 的核心，它是 Python 的执行引擎的基础。如果我们能够理解字节码，那么我们就能够理解 Python 的执行引擎，也就能够理解 Python 的运行机制。</p><p>字节码更接近底层，像汇编指令一样更接近机器。Python3.10.7 共用 165 个字节码，主要分为这几大类：</p><ul><li>加载和存储指令 <ul><li>STORE_NAME</li><li>DELETE_NAME</li><li>LOAD_NAME</li><li>LOAD_CONST</li></ul></li><li>栈操作指令 <ul><li>POP_TOP</li><li>ROT_TWO</li><li>ROT_THREE</li><li>DUP_TOP</li><li>DUP_TOP_TWO</li></ul></li><li>控制流指令 <ul><li>JUMP_FORWARD</li><li>JUMP_IF_FALSE_OR_POP</li><li>POP_JUMP_IF_FALSE</li></ul></li><li>函数调用指令 <ul><li>CALL_FUNCTION</li><li>CALL_FUNCTION_KW</li><li>CALL_FUNCTION_EX</li><li>CALL_METHOD</li><li>LOAD_METHOD</li></ul></li><li>二进制运算指令 <ul><li>BINARY_POWER</li><li>BINARY_MULTIPLY</li><li>BINARY_MODULO</li><li>BINARY_ADD</li><li>BINARY_SUBTRACT</li><li>BINARY_SUBSCR</li><li>BINARY_FLOOR_DIVIDE</li><li>BINARY_TRUE_DIVIDE</li></ul></li><li>比较指令 <ul><li>COMPARE_OP</li><li>IS_OP</li></ul></li><li>异常处理指令 <ul><li>POP_EXCEPT</li></ul></li><li>基础数据操作指令 <ul><li>BUILD_TUPLE</li><li>BUILD_LIST</li><li>BUILD_SET</li><li>BUILD_MAP</li><li>LOAD_ATTR</li></ul></li><li>其他指令</li></ul><p>具体指令的定义在<code>Include/opcode.h</code>文件中，由于篇幅有点长，就不全部贴出来了，挑选了一些有代表性的指令，有兴趣的同学可以翻阅源码看看。Opcode 的代码是通过 Python 的脚本生成的。可以从文件的头部看到如下注释。是不是感到特别的神奇，用 Python 脚本生成 C 代码。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Auto-generated by Tools/scripts/generate_opcode_h.py from Lib/opcode.py */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>指令的命名很容易看出它具体的作用，比如<code>LOAD_NAME</code>指令就是加载一个变量名，<code>STORE_NAME</code>指令就是存储一个变量名。<code>LOAD_CONST</code>指令就是加载一个常量，<code>POP_TOP</code>指令就是弹出栈顶元素。<code>BINARY_ADD</code>指令就是执行两个对象的加法操作，<code>BINARY_SUBTRACT</code>指令就是执行两个对象的减法操作。<code>COMPARE_OP</code>指令就是执行两个对象的比较操作。<code>BUILD_TUPLE</code>指令就是构建一个元组对象，<code>BUILD_LIST</code>指令就是构建一个列表对象，<code>BUILD_SET</code>指令就是构建一个集合对象，<code>BUILD_MAP</code>指令就是构建一个字典对象。<code>LOAD_ATTR</code>指令就是加载一个属性。</p><p>指令和指令参数是绑定在一起的，有的指令有参数，有的是没有参数的。字节码的数据类型是<code>unsigned short int</code>，也就是 2 个字节，对于大端来说，前高位字节 8 位表示 opcode，低位字节 8 位表示操作数。指令参数的值是通过<code>_Py_OPARG</code>宏来获取的，指令的值是通过<code>_Py_OPCODE</code>宏来获取的，通过左移 8 位获取 opcode，按位与<code>0b11111111</code>得到操作参数。这两个宏的定义如下所示：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WORDS_BIGENDIAN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#  define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _Py_OPCODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">word</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ((word) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#  define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _Py_OPARG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">word</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ((word) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#  define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _Py_OPCODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">word</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ((word) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#  define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _Py_OPARG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">word</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ((word) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NEXTOPARG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _Py_CODEUNIT word </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">next_instr; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        opcode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _Py_OPCODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(word); </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oparg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _Py_OPARG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(word); </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        next_instr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>下面来个例子看看字节码长什么样子。从<code>list(x.__code__.co_code)</code>的输出结果可以看出，奇数位（索引从 1 开始）为指令，偶数位为指令参数的值，有的 0 表示没有指令参数，有的 0 表示索引位置等。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> def </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">... 	x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">... 	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.__code__.co_code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\x01</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\x00</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\x00</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\x00\\x83\\x01\\x01\\x00</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\x00</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">S</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\x00</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.__code__.co_code)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">125</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">116</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">124</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">131</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">83</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> import dis</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LOAD_CONST               </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> STORE_FAST               </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LOAD_GLOBAL              </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (print)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LOAD_FAST                </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALL_FUNCTION            </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> POP_TOP</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LOAD_CONST               </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (None)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">opname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;LOAD_CONST&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">opname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">125</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;STORE_FAST&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="指令参数有什么作用" tabindex="-1">指令参数有什么作用？ <a class="header-anchor" href="#指令参数有什么作用" aria-label="Permalink to &quot;指令参数有什么作用？&quot;">​</a></h2><p>例如<code>LOAD_CONST</code>有一个指令参数 oparg，它的作用是从常量表中取出值，那么参数就是常量表的索引。之前版本有两个指令参数，随着设计者的不断优化，如今只有一个指令参数，提高了字节码的执行效率。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    case </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TARGET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LOAD_CONST): {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 加载常量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        PREDICTED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LOAD_CONST);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GETITEM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(consts, oparg);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Py_INCREF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        PUSH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        DISPATCH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,13)]))}const y=i(p,[["render",h]]);export{g as __pageData,y as default};
