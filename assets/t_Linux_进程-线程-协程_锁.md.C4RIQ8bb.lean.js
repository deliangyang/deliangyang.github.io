import{_ as e,c as t,a3 as l,o as r}from"./chunks/framework.BOyF8YV7.js";const m=JSON.parse('{"title":"深入理解数据库与编程中的六种锁机制：乐观锁、悲观锁、自旋锁、互斥锁、读写锁和RCU锁","description":"本文介绍了常见的锁机制，包括乐观锁、悲观锁、自旋锁、互斥锁、读写锁和RCU锁，比较了它们的特点和适用场景，帮助读者理解并选择合适的锁机制以应对多线程并发编程中的数据一致性问题。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/Linux/进程-线程-协程/锁.html"}],["meta",{"property":"og:title","title":"深入理解数据库与编程中的六种锁机制：乐观锁、悲观锁、自旋锁、互斥锁、读写锁和RCU锁"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/Linux/进程-线程-协程/锁.html"}],["meta",{"name":"keywords","content":"乐观锁,悲观锁,自旋锁,互斥锁,读写锁,RCU锁,并发控制,锁机制,多线程,线程安全,数据库锁,编程锁"}]]},"headers":[],"relativePath":"t/Linux/进程-线程-协程/锁.md","filePath":"t/Linux/进程-线程-协程/锁.md","lastUpdated":1736299776000}'),i={name:"t/Linux/进程-线程-协程/锁.md"};function o(n,a,h,u,c,d){return r(),t("div",null,a[0]||(a[0]=[l('<h2 id="乐观锁" tabindex="-1">乐观锁 <a class="header-anchor" href="#乐观锁" aria-label="Permalink to &quot;乐观锁&quot;">​</a></h2><ul><li>比较佛系，反正就是不加锁，要更新数据的时候进行数据判断，如果数据改了就不更新，没有更新再更新</li><li>其他进程对该数据正常读写</li></ul><h2 id="悲观锁" tabindex="-1">悲观锁 <a class="header-anchor" href="#悲观锁" aria-label="Permalink to &quot;悲观锁&quot;">​</a></h2><ul><li>获取数据的时候担心数据被修改，所以在获取数据之前会加锁，使用完了再解锁，但是其他线程在进行该数据读写的时候会阻塞等待</li></ul><h2 id="自旋锁" tabindex="-1">自旋锁 <a class="header-anchor" href="#自旋锁" aria-label="Permalink to &quot;自旋锁&quot;">​</a></h2><ul><li>处理临界情况，等地轮询</li></ul><h2 id="互斥锁" tabindex="-1">互斥锁 <a class="header-anchor" href="#互斥锁" aria-label="Permalink to &quot;互斥锁&quot;">​</a></h2><ul><li>访问前加锁，访问后解锁</li></ul><h2 id="读写锁" tabindex="-1">读写锁 <a class="header-anchor" href="#读写锁" aria-label="Permalink to &quot;读写锁&quot;">​</a></h2><ul><li>共享互斥锁，读模式共享，写模式互斥</li></ul><h2 id="rcu-锁" tabindex="-1">RCU 锁 <a class="header-anchor" href="#rcu-锁" aria-label="Permalink to &quot;RCU 锁&quot;">​</a></h2><ul><li>读写锁的扩展版本，多读多写同时加锁</li></ul>',12)]))}const p=e(i,[["render",o]]);export{m as __pageData,p as default};
