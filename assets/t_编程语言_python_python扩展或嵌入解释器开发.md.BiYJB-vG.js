import{_ as i,c as a,a3 as n,o as l}from"./chunks/framework.BOyF8YV7.js";const y=JSON.parse('{"title":"C/C++ 扩展 Python：模块扩展与嵌入 Python 解释器详解","description":"学习如何使用 C/C++ 扩展 Python，包括嵌入 Python 解释器和开发 Python 模块。文章涵盖了初始化、执行 Python 代码、参数解析、模块创建等关键步骤，并提供了代码示例和编译方法，帮助你提升 Python 应用程序性能并深入理解 Python 的实现原理。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/python/python扩展或嵌入解释器开发.html"}],["meta",{"property":"og:title","title":"C/C++ 扩展 Python：模块扩展与嵌入 Python 解释器详解"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/python/python扩展或嵌入解释器开发.html"}],["meta",{"name":"keywords","content":"Python,C++,C,扩展,模块,嵌入,解释器,Py_Initialize,PyRun_SimpleString,Py_Finalize,PyArg_ParseTuple,PyObject,PyMethodDef,PyModuleDef,PyInit_demo,PyModule_Create,动态链接库,性能优化,代码热更新,模块扩展,Python扩展开发,嵌入式Python"}]]},"headers":[],"relativePath":"t/编程语言/python/python扩展或嵌入解释器开发.md","filePath":"t/编程语言/python/python扩展或嵌入解释器开发.md","lastUpdated":1736299776000}'),e={name:"t/编程语言/python/python扩展或嵌入解释器开发.md"};function p(h,s,t,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="使用-c-c-扩展-python-实现-python-模块扩展或嵌入-python-解释器" tabindex="-1">使用 C/C++ 扩展 Python，实现 Python 模块扩展或嵌入 Python 解释器 <a class="header-anchor" href="#使用-c-c-扩展-python-实现-python-模块扩展或嵌入-python-解释器" aria-label="Permalink to &quot;使用 C/C++ 扩展 Python，实现 Python 模块扩展或嵌入 Python 解释器&quot;">​</a></h2><p>Python 扩展开发。是使用 C/C++ 来编写 Python 模块，通过导入动态链接库，调用 C/C++ 编写的模块<br> 嵌入 Python 解释器。在编写 C/C++ 的程序时，通过调用 Python 解释器来执行 Python 的代码</p><h3 id="嵌入-python-解释器" tabindex="-1">嵌入 Python 解释器 <a class="header-anchor" href="#嵌入-python-解释器" aria-label="Permalink to &quot;嵌入 Python 解释器&quot;">​</a></h3><h4 id="编写-demo-程序" tabindex="-1">编写 Demo 程序 <a class="header-anchor" href="#编写-demo-程序" aria-label="Permalink to &quot;编写 Demo 程序&quot;">​</a></h4><ul><li>Py_Initialize 初始化 Python 解释器</li><li>PyRun_SimpleString 执行简单的 python 语句，输出<code>hello world</code></li><li>Py_Finalize 释放或销毁解释器</li></ul><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;Python.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Py_Initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    PyRun_SimpleString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;print(&#39;hello world&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Py_Finalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="编译以及执行程序" tabindex="-1">编译以及执行程序 <a class="header-anchor" href="#编译以及执行程序" aria-label="Permalink to &quot;编译以及执行程序&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.cpp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -I/Library/Frameworks/Python.framework/Versions/3.7/include/python3.7m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -L/Library/Frameworks/Python.framework/Versions/3.7/lib/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -lpython3.7m</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h4><ul><li>如何实现一个动态的执行程序？ <ul><li>通过读取 Python 文件，将文件内容通过传参的方式交付给<code>PyRun_SimpleString</code>，这就回归到<code>C/C++</code>中的文件读取的问题了</li><li>我们可以通过程序传参或者重定向的方式，将 <code>print(&#39;hello world&#39;)</code> 替换为我们想要执行的程序</li></ul></li><li>是否可以实现代码热更新呢？ <ul><li>通常情况下，我们会耗费大量的时间在编译大型的 C/C++ 程序，如果通过动态加载 Python 代码的方式，达到我们想要的效果，大大地提升了我们的效率，虽然这会牺牲程序的性能。</li></ul></li></ul><h3 id="开发-python-内置模块" tabindex="-1">开发 Python 内置模块 <a class="header-anchor" href="#开发-python-内置模块" aria-label="Permalink to &quot;开发 Python 内置模块&quot;">​</a></h3><ul><li><code>PyObject* add(PyObject* self, PyObject* args)</code> 定义一个静态的方法，返回数据结构 <code>PyObject*</code><ul><li>在 C Python 库中，所有的数据类型都为 <code>PyObject*</code></li></ul></li><li><code>PyArg_ParseTuple</code> 解析函数 <code>add</code> 的传参 <ul><li><code>ii</code> 表示传入两个 int 类型的数值</li><li><code>s</code> 表示传入的一个字符串参数</li><li>详细说明可以查看参考引用。<a href="#refer-anchor-1"><sup>1</sup></a></li></ul></li><li>MyDemoMethods 为方法生命数组，定义模块方法名，绑定方法，以及方法注释等</li><li>demomodule 定义模块，模块名称为 <code>demo</code></li><li><code>PyMODINIT_FUNC PyInit_demo(void)</code> 初始化创建模块</li></ul><h4 id="扩展模块开发" tabindex="-1">扩展模块开发 <a class="header-anchor" href="#扩展模块开发" aria-label="Permalink to &quot;扩展模块开发&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// demo.cpp</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Python.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PyObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, PyObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PyArg_ParseTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ii&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b)){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nullptr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PyLong_FromLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyMethodDef MyDemoMethods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;addx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, add, METH_VARARGS, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;add two integers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {nullptr, nullptr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, nullptr},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PyModuleDef demomodule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyModuleDef_HEAD_INIT,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* name of module */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* module documentation, may be NULL */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       /* size of per-interpreter state of the module,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 or -1 if the module keeps state in global variables. */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MyDemoMethods</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PyMODINIT_FUNC </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PyInit_demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PyModule_Create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spammodule);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h4 id="编写-python-程序-调用动态库模块-执行程序" tabindex="-1">编写 python 程序，调用动态库模块，执行程序 <a class="header-anchor" href="#编写-python-程序-调用动态库模块-执行程序" aria-label="Permalink to &quot;编写 python 程序，调用动态库模块，执行程序&quot;">​</a></h4><ul><li><code>sys.path.append(&#39;./demo.so&#39;)</code> 加载动态链接库</li><li><code>demo.addx</code> 执行模块 <code>demo</code> 中的方法 <code>addx</code></li></ul><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># test.py</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sys.path.append(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./demo.so&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> demo</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(demo.addx(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4312</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    main()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="编译以及执行程序-1" tabindex="-1">编译以及执行程序 <a class="header-anchor" href="#编译以及执行程序-1" aria-label="Permalink to &quot;编译以及执行程序&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fpic</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -I/Library/Frameworks/Python.framework/Versions/3.7/include/python3.7m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  demo.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -shared</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo.so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo.o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lstdc++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -L/Library/Frameworks/Python.framework/Versions/3.7/lib/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lpython3.7m</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.py</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output: 4435</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="思考-1" tabindex="-1">思考 <a class="header-anchor" href="#思考-1" aria-label="Permalink to &quot;思考&quot;">​</a></h4><ul><li>通过 C/C++ 编写 Python 模块的好处良多。直接调用 C/C++ 编写的程序大大地提升了 Python 应用程序的性能。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>无论用 C/C++ 编写 Python 的模块，还是内置 Python 解释器，最终的解决方案都需要我们自己评估。需要从应用场景，开发成本，性能、或者效率提升等方面抉择，最终落地。</li><li>通过底层的学习，让我们更深入地了解 Python 的实现原理以及应用，在编写 Python 程序时候会更加注意细节。</li></ul><h2 id="资料引用" tabindex="-1">资料引用 <a class="header-anchor" href="#资料引用" aria-label="Permalink to &quot;资料引用&quot;">​</a></h2><ul><li>[1] <a href="https://docs.python.org/zh-cn/3.7/c-api/arg.html" target="_blank" rel="nofollow noopener noreferrer">PyArg_ParseTuple 参数解析</a></li></ul>`,25)]))}const c=i(e,[["render",p]]);export{y as __pageData,c as default};
