import{_ as l,c as n,j as t,o as a}from"./chunks/framework.BOyF8YV7.js";const u=JSON.parse('{"title":"分治法详解：原理、步骤及经典应用案例","description":"分治法是一种重要的算法范型，它将复杂问题分解成多个规模较小的子问题，递归解决子问题，再合并子问题的解得到原问题的解。文章介绍了分治法的三个步骤（分解、解决、合并），并列举了归并排序、快速排序、二分查找和傅里叶变换等经典应用。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/C&C++/分而治之.html"}],["meta",{"property":"og:title","title":"分治法详解：原理、步骤及经典应用案例"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/C&C++/分而治之.html"}],["meta",{"name":"keywords","content":"分治法,算法,递归,归并排序,快速排序,二分查找,傅里叶变换,算法范型,子问题,分解,解决,合并"}]]},"headers":[],"relativePath":"t/编程语言/C&C++/分而治之.md","filePath":"t/编程语言/C&C++/分而治之.md","lastUpdated":1736299776000}'),o={name:"t/编程语言/C&C++/分而治之.md"};function r(s,e,c,p,i,m){return a(),n("div",null,e[0]||(e[0]=[t("p",null,"分治法是建基于多项分支递归的一种很重要的算法范型。就是把一个复杂的问题分成两个或者更多的相同或者相似的子问题，知道最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。分治法在每一层递归上都有三个步骤：",-1),t("ol",null,[t("li",null,"分解：将原问题分解为若干个规模较小，相互独立且与原问题形式相同的子问题。"),t("li",null,"解决：若子问题规模较小而容易被解决则直接解决，否则递归地解决各个子问题。"),t("li",null,"合并：将各个子问题的解合并为原问题的解。")],-1),t("p",null,"分而治之有哪些经典的应用呢？比如归并排序、快速排序、二分查找、傅里叶变换等等。",-1)]))}const _=l(o,[["render",r]]);export{u as __pageData,_ as default};
