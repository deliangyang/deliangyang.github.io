import{_ as e,c as t,a3 as a,o as i}from"./chunks/framework.BOyF8YV7.js";const m=JSON.parse('{"title":"红黑树详解：特性、自平衡机制及左旋右旋操作","description":"红黑树是一种自平衡二叉搜索树，具有高效的插入、删除和查找操作。文章详细介绍了红黑树的特征，包括节点颜色、根节点、叶子节点以及黑节点数量的限制。此外，还阐述了红黑树的自平衡机制，包括左旋、右旋和变色操作。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/算法/红黑树.html"}],["meta",{"property":"og:title","title":"红黑树详解：特性、自平衡机制及左旋右旋操作"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/算法/红黑树.html"}],["meta",{"name":"keywords","content":"红黑树,自平衡,左旋,右旋,变色,数据结构,算法,搜索树,平衡树,红黑树特性,节点颜色,黑色节点,红色节点"}]]},"headers":[],"relativePath":"t/算法/红黑树.md","filePath":"t/算法/红黑树.md","lastUpdated":1736299776000}'),o={name:"t/算法/红黑树.md"};function r(n,l,c,d,s,u){return i(),t("div",null,l[0]||(l[0]=[a('<h2 id="红黑树" tabindex="-1">红黑树 <a class="header-anchor" href="#红黑树" aria-label="Permalink to &quot;红黑树&quot;">​</a></h2><h3 id="特征" tabindex="-1">特征 <a class="header-anchor" href="#特征" aria-label="Permalink to &quot;特征&quot;">​</a></h3><ul><li>每个节点要么是黑色，要么是红色</li><li>根节点是黑色</li><li>每个叶子节点 (NIL) 是黑色</li><li>每个红色节点的两个子节点一定是黑色</li><li>任意一节点到每个叶子节点的路径都包含相同数量的黑节点 <ul><li>如果一个节点存在黑子节点，那么该节点肯定有两个子节点</li></ul></li></ul><h3 id="红黑树自平衡" tabindex="-1">红黑树自平衡 <a class="header-anchor" href="#红黑树自平衡" aria-label="Permalink to &quot;红黑树自平衡&quot;">​</a></h3><ul><li>左旋 <ul><li>以某个节点作为<code>旋转节点</code>，其右子节点旋转为父节点，右子节点的左子节点旋转变为<code>旋转节点</code>的右子节点，左子节点保持不变。</li></ul></li><li>右旋 <ul><li>以某个节点作为<code>旋转节点</code>，其左子节点变为旋转节点的父节点，左子节点的右子节点变为<code>旋转节点</code>的左子节点，右子节点保持不变。</li></ul></li><li>变色 <ul><li>红变黑、或黑变红。</li></ul></li></ul>',5)]))}const p=e(o,[["render",r]]);export{m as __pageData,p as default};
