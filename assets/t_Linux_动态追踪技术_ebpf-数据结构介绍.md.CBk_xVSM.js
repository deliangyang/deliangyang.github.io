import{_ as a,c as t,a3 as e,o as i}from"./chunks/framework.BOyF8YV7.js";const E=JSON.parse('{"title":"Understanding and Utilizing BPF Maps in eBPF Programming","description":"This document details various BPF map types (e.g., BPF_MAP_TYPE_ARRAY, BPF_MAP_TYPE_HASH, BPF_MAP_TYPE_LRU_HASH, etc.), demonstrates how to define and use them in C code, including functions like bpf_map_lookup_elem, bpf_map_update_elem, and bpf_map_get_next_key for map manipulation and traversal.  It also provides examples of creating maps and iterating through their elements.","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/Linux/动态追踪技术/ebpf-数据结构介绍.html"}],["meta",{"property":"og:title","title":"Understanding and Utilizing BPF Maps in eBPF Programming"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/Linux/动态追踪技术/ebpf-数据结构介绍.html"}],["meta",{"name":"keywords","content":"BPF,BPF maps,eBPF,map types,BPF_MAP_TYPE_ARRAY,BPF_MAP_TYPE_HASH,BPF_MAP_TYPE_LRU_HASH,BPF_MAP_TYPE_STACK,BPF_MAP_TYPE_SOCKMAP,bpf_map_lookup_elem,bpf_map_update_elem,bpf_map_delete_elem,bpf_map_get_next_key,map traversal,libbpf,C,kernel"}]]},"headers":[],"relativePath":"t/Linux/动态追踪技术/ebpf-数据结构介绍.md","filePath":"t/Linux/动态追踪技术/ebpf-数据结构介绍.md","lastUpdated":1736299776000}'),n={name:"t/Linux/动态追踪技术/ebpf-数据结构介绍.md"};function l(p,s,r,h,k,d){return i(),t("div",null,s[0]||(s[0]=[e(`<h2 id="mpas-类型" tabindex="-1">mpas 类型 <a class="header-anchor" href="#mpas-类型" aria-label="Permalink to &quot;mpas 类型&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">类型名称</th><th style="text-align:center;">解释</th></tr></thead><tbody><tr><td style="text-align:center;">BPF_MAP_TYPE_ARRAY</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_PERCPU_ARRAY</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_BLOOM_FILTER</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_CGROUP_STORAGE</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_CGRP_STORAGE</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_CPUMAP</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_DEVMAP</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_DEVMAP_HASH</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_HASH</td><td style="text-align:center;">哈希表映射，用于保存 key/value 对</td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_PERCPU_HASH</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_LRU_HASH</td><td style="text-align:center;">哈希表，拥有 LRU 功能</td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_LPM_TRIE</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_ARRAY_OF_MAPS</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_HASH_OF_MAPS</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_QUEUE</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_STACK</td><td style="text-align:center;">调用栈跟踪映射，用于存储调试栈信息</td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_SK_STORAGE</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_SOCKMAP</td><td style="text-align:center;">套接字映射，用于存储套接字引用，特别是用于套接字的重定向</td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_SOCKHASH</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BPF_MAP_TYPE_XSKMAP</td><td style="text-align:center;"></td></tr></tbody></table><h2 id="定义一个-maps" tabindex="-1">定义一个 maps <a class="header-anchor" href="#定义一个-maps" aria-label="Permalink to &quot;定义一个 maps&quot;">​</a></h2><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, BPF_MAP_TYPE_ARRAY);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, u32);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(max_entries, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} my_map </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SEC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.mpas&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="相关函数" tabindex="-1">相关函数 <a class="header-anchor" href="#相关函数" aria-label="Permalink to &quot;相关函数&quot;">​</a></h2><ul><li>bpf_map_lookup_elem(&amp;my_map, &amp;index) 从 map 中查找一个元素</li><li>__sync_fetch_and_add(value, 1) 原子自增 1</li><li>bpf_map_update_elem（&amp;my_map, &amp;index, &amp;value, BPF_ANY) 更新数值</li><li>long bpf_map_delete_elem(struct bpf_map *map, const void *key) 删除元素</li></ul><h2 id="遍历-maps" tabindex="-1">遍历 maps <a class="header-anchor" href="#遍历-maps" aria-label="Permalink to &quot;遍历 maps&quot;">​</a></h2><ul><li>遍历 maps 有点意思，起到关键的就是 <code>next_key</code><ul><li>bpf_map_get_next_key 通过一个<code>null key</code>获取 next_key，指针取地址</li><li>bpf_map_lookup_elem 查找元素</li><li>将 next_key 赋值给当前 key。</li></ul></li><li>用起来其它的语言方便</li></ul><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;bpf/libbpf.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;bpf/bpf.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> walk_hash_elements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> map_fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cur_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key next_key;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;;) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bpf_map_get_next_key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map_fd, cur_key, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">next_key);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bpf_map_lookup_elem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map_fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">next_key, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Use key and value here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cur_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">next_key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://docs.kernel.org/bpf/map_array.html" target="_blank" rel="nofollow noopener noreferrer">https://docs.kernel.org/bpf/map_array.html</a></li></ul>`,11)]))}const c=a(n,[["render",l]]);export{E as __pageData,c as default};
