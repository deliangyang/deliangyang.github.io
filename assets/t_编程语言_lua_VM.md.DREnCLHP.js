import{_ as a,c as n,a3 as i,o as t}from"./chunks/framework.BOyF8YV7.js";const c=JSON.parse('{"title":"Lua虚拟机OpCode指令集详解 (47个指令)","description":"Lua虚拟机指令集详解，包含47个指令的名称、参数和描述，例如OP_MOVE, OP_LOADK, OP_CALL等，用于理解Lua虚拟机的执行机制。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/lua/VM.html"}],["meta",{"property":"og:title","title":"Lua虚拟机OpCode指令集详解 (47个指令)"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/lua/VM.html"}],["meta",{"name":"keywords","content":"Lua,VM,OpCode,bytecode,virtual machine,instruction set,OP_MOVE,OP_LOADK,OP_CALL,OP_RETURN,Lua虚拟机,Lua指令集,Lua字节码"}]]},"headers":[],"relativePath":"t/编程语言/lua/VM.md","filePath":"t/编程语言/lua/VM.md","lastUpdated":1736299776000}'),l={name:"t/编程语言/lua/VM.md"};function p(e,s,h,k,r,E){return t(),n("div",null,s[0]||(s[0]=[i(`<h3 id="vm-执行-opcode" tabindex="-1">VM 执行 OpCode <a class="header-anchor" href="#vm-执行-opcode" aria-label="Permalink to &quot;VM 执行 OpCode&quot;">​</a></h3><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaV_execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="opcode-有哪些-共-47-个指令" tabindex="-1">OpCode 有哪些，共 47 个指令 <a class="header-anchor" href="#opcode-有哪些-共-47-个指令" aria-label="Permalink to &quot;OpCode 有哪些，共 47 个指令&quot;">​</a></h3><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*----------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    name		args	description</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ------------------------------------------------------------------------*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_MOVE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B	R(A) := R(B)					*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_LOADK,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A Bx	R(A) := Kst(Bx)					*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_LOADKX,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A 	R(A) := Kst(extra arg)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_LOADBOOL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := (Bool)B; if (C) pc++			*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_LOADNIL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B	R(A), R(A+1), ..., R(A+B) := nil		*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_GETUPVAL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B	R(A) := UpValue[B]				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_GETTABUP,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := UpValue[B][RK(C)]			*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_GETTABLE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := R(B)[RK(C)]				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_SETTABUP,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	UpValue[A][RK(B)] := RK(C)			*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_SETUPVAL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B	UpValue[B] := R(A)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_SETTABLE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A)[RK(B)] := RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_NEWTABLE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := {} (size = B,C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_SELF,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]		*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_ADD,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := RK(B) + RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_SUB,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := RK(B) - RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_MUL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := RK(B) * RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_MOD,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := RK(B) % RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_POW,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := RK(B) ^ RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_DIV,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := RK(B) / RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_IDIV,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := RK(B) // RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_BAND,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := RK(B) &amp; RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_BOR,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := RK(B) | RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_BXOR,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := RK(B) ~ RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_SHL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := RK(B) &lt;&lt; RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_SHR,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := RK(B) &gt;&gt; RK(C)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_UNM,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B	R(A) := -R(B)					*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_BNOT,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B	R(A) := ~R(B)					*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_NOT,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B	R(A) := not R(B)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_LEN,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B	R(A) := length of R(B)				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_CONCAT,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A) := R(B).. ... ..R(C)			*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_JMP,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A sBx	pc+=sBx; if (A) close all upvalues &gt;= R(A - 1)	*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_EQ,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	if ((RK(B) == RK(C)) ~= A) then pc++		*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_LT,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	if ((RK(B) &lt;  RK(C)) ~= A) then pc++		*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_LE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	if ((RK(B) &lt;= RK(C)) ~= A) then pc++		*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_TEST,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A C	if not (R(A) &lt;=&gt; C) then pc++			*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_TESTSET,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	if (R(B) &lt;=&gt; C) then R(A) := R(B) else pc++	*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_CALL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_TAILCALL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_RETURN,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B	return R(A), ... ,R(A+B-2)	(see note)	*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_FORLOOP,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A sBx	R(A)+=R(A+2);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                if R(A) &lt;?= R(A+1) then { pc+=sBx; R(A+3)=R(A) }*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_FORPREP,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A sBx	R(A)-=R(A+2); pc+=sBx				*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_TFORCALL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));	*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_TFORLOOP,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A sBx	if R(A+1) ~= nil then { R(A)=R(A+1); pc += sBx }*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_SETLIST,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 &lt;= i &lt;= B	*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_CLOSURE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A Bx	R(A) := closure(KPROTO[Bx])			*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_VARARG,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	A B	R(A), R(A+1), ..., R(A+B-2) = vararg		*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP_EXTRAARG</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*	Ax	extra (larger) argument for previous opcode	*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} OpCode;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div>`,4)]))}const d=a(l,[["render",p]]);export{c as __pageData,d as default};
