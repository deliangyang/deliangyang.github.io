import{_ as i,c as t,a3 as e,G as r,B as o,o as h}from"./chunks/framework.BOyF8YV7.js";const f=JSON.parse('{"title":"自己动手实现Lua：从零构建Lua虚拟机和编译器","description":"本文详细介绍了如何从零开始实现Lua语言，涵盖了Lua虚拟机、Lua API、词法分析、语法分析、抽象语法树构建、代码生成等核心环节，并深入探讨了Lua的标准库和一些高级特性，例如元编程和协程。 通过学习本文，你可以深入理解Lua的设计思想和实现细节。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/读后感/2022/自己动手实现Lua.html"}],["meta",{"property":"og:title","title":"自己动手实现Lua：从零构建Lua虚拟机和编译器"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/读后感/2022/自己动手实现Lua.html"}],["meta",{"name":"keywords","content":"Lua,Lua虚拟机,Lua API,词法分析,语法分析,抽象语法树,AST,代码生成,编译器,标准库,Go,编程语言设计,源码分析,元编程,迭代器,协程,token,字节码,bytecode"}]]},"headers":[],"relativePath":"读后感/2022/自己动手实现Lua.md","filePath":"读后感/2022/自己动手实现Lua.md","lastUpdated":1736299776000}'),u={name:"读后感/2022/自己动手实现Lua.md"};function n(d,a,c,s,b,m){const l=o("Mermaid");return h(),t("div",null,[a[0]||(a[0]=e('<h1 id="自己动手实现-lua" tabindex="-1">自己动手实现 Lua <a class="header-anchor" href="#自己动手实现-lua" aria-label="Permalink to &quot;自己动手实现 Lua&quot;">​</a></h1><h2 id="准备" tabindex="-1">准备 <a class="header-anchor" href="#准备" aria-label="Permalink to &quot;准备&quot;">​</a></h2><ul><li>准备开发环境 <ul><li>IDE vscode 安装 c/c++ 插件，go 相关开发的插件</li></ul></li><li>了解 Lua 源码的目录结构，相关文件存在的意义</li><li>改变自己的默认看法，学习一门语言不是为了学习新的语法糖，而是学习它的设计思想。每种语言发展至今都有其存在的意义，如果没有什么特色，学一门语言和多门语言有什么区别呢？</li></ul><h2 id="lua-虚拟机和-lua-api" tabindex="-1">Lua 虚拟机和 Lua API <a class="header-anchor" href="#lua-虚拟机和-lua-api" aria-label="Permalink to &quot;Lua 虚拟机和 Lua API&quot;">​</a></h2><h3 id="二进制-chunk" tabindex="-1">二进制 chunk <a class="header-anchor" href="#二进制-chunk" aria-label="Permalink to &quot;二进制 chunk&quot;">​</a></h3><h3 id="指令集" tabindex="-1">指令集 <a class="header-anchor" href="#指令集" aria-label="Permalink to &quot;指令集&quot;">​</a></h3><h3 id="lua-api" tabindex="-1">Lua API <a class="header-anchor" href="#lua-api" aria-label="Permalink to &quot;Lua API&quot;">​</a></h3><h3 id="lua-运算符" tabindex="-1">Lua 运算符 <a class="header-anchor" href="#lua-运算符" aria-label="Permalink to &quot;Lua 运算符&quot;">​</a></h3><h3 id="虚拟机雏形" tabindex="-1">虚拟机雏形 <a class="header-anchor" href="#虚拟机雏形" aria-label="Permalink to &quot;虚拟机雏形&quot;">​</a></h3><h3 id="表" tabindex="-1">表 <a class="header-anchor" href="#表" aria-label="Permalink to &quot;表&quot;">​</a></h3><h3 id="函数调用" tabindex="-1">函数调用 <a class="header-anchor" href="#函数调用" aria-label="Permalink to &quot;函数调用&quot;">​</a></h3><h3 id="go-函数调用" tabindex="-1">Go 函数调用 <a class="header-anchor" href="#go-函数调用" aria-label="Permalink to &quot;Go 函数调用&quot;">​</a></h3><h3 id="闭包和-upvalue" tabindex="-1">闭包和 Upvalue <a class="header-anchor" href="#闭包和-upvalue" aria-label="Permalink to &quot;闭包和 Upvalue&quot;">​</a></h3><h3 id="元编程" tabindex="-1">元编程 <a class="header-anchor" href="#元编程" aria-label="Permalink to &quot;元编程&quot;">​</a></h3><h3 id="迭代器" tabindex="-1">迭代器 <a class="header-anchor" href="#迭代器" aria-label="Permalink to &quot;迭代器&quot;">​</a></h3><h2 id="lua-语法和编译器" tabindex="-1">Lua 语法和编译器 <a class="header-anchor" href="#lua-语法和编译器" aria-label="Permalink to &quot;Lua 语法和编译器&quot;">​</a></h2>',16)),r(l,{id:"mermaid_382ee1e9",graph:"graph%20LR%0AA%5BSource%5D%20--%20Lexer%20--%3E%20B%5BTokens%5D%0AB%5BTokens%5D%20--%20Parser%20--%3E%20C%5BAST%5D%0AC%5BAST%5D%20--%20Codegen%20--%3E%20D%5BByteCodes%5D"}),a[1]||(a[1]=e('<h3 id="词法分析" tabindex="-1">词法分析 <a class="header-anchor" href="#词法分析" aria-label="Permalink to &quot;词法分析&quot;">​</a></h3><p>词法分析器的作用是根据编程语言的词法规则，把源代码（字符流）分解为 token 流。 token 按其作用可以分为不同的类型，比较常见的类型：</p><ul><li>空白字符 <ul><li>\\r、\\n、\\t、\\v、\\f、\\s</li></ul></li><li>注释 <ul><li>短注释、长注释</li></ul></li><li>关键字 <ul><li>and、break、do、else、if、elseif、end、false、for、fuction、goto、in、nil、local、not、or、repeat、return、then、true、until、while</li></ul></li><li>标识符 <ul><li>Identifier 变量命名</li></ul></li><li>字面量 <ul><li>数字字面变量，整数、浮点</li><li>字符串字面量</li></ul></li><li>运算符 <ul><li>+、-、*、/、^、~、%、&amp;、|、&gt;&gt;、&lt;&lt;等</li></ul></li><li>分隔符 <ul><li>(、)、[、]、{、}、,、:、;等</li></ul></li></ul><h3 id="抽象语法树-ast" tabindex="-1">抽象语法树 AST <a class="header-anchor" href="#抽象语法树-ast" aria-label="Permalink to &quot;抽象语法树 AST&quot;">​</a></h3><p>语法规则定义了怎样的组合可以构成合法的程序。<code>词法分析阶段</code>根据<code>词法规则</code>将字符序列分解为 token 序列，<code>语法分析阶段</code>根据<code>语法规则</code>将 token 序列解析为抽象语法树（AST）。</p><p>例如：a * (b + c)</p>',6)),r(l,{id:"mermaid_64a56f2c",graph:"graph%20TB%0A%20%20A((*))%20--%3E%20B((a))%0A%20%20A((*))%20--%3E%20C((%2B))%0A%20%20C((%2B))%20--%3E%20D((b))%0A%20%20C((%2B))%20--%3E%20E((c))"}),a[2]||(a[2]=e('<h3 id="语法分析" tabindex="-1">语法分析 <a class="header-anchor" href="#语法分析" aria-label="Permalink to &quot;语法分析&quot;">​</a></h3><h3 id="代码生成" tabindex="-1">代码生成 <a class="header-anchor" href="#代码生成" aria-label="Permalink to &quot;代码生成&quot;">​</a></h3><h2 id="lua-标准库" tabindex="-1">Lua 标准库 <a class="header-anchor" href="#lua-标准库" aria-label="Permalink to &quot;Lua 标准库&quot;">​</a></h2><h3 id="辅助-api-和基础库" tabindex="-1">辅助 API 和基础库 <a class="header-anchor" href="#辅助-api-和基础库" aria-label="Permalink to &quot;辅助 API 和基础库&quot;">​</a></h3><h3 id="工具库" tabindex="-1">工具库 <a class="header-anchor" href="#工具库" aria-label="Permalink to &quot;工具库&quot;">​</a></h3><h3 id="包和模块" tabindex="-1">包和模块 <a class="header-anchor" href="#包和模块" aria-label="Permalink to &quot;包和模块&quot;">​</a></h3><h3 id="协程" tabindex="-1">协程 <a class="header-anchor" href="#协程" aria-label="Permalink to &quot;协程&quot;">​</a></h3><h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h1>',8))])}const p=i(u,[["render",n]]);export{f as __pageData,p as default};
