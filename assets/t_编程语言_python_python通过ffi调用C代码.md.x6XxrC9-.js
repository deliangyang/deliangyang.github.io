import{_ as l,c as p,j as i,a,G as t,a3 as e,B as h,o as r}from"./chunks/framework.BOyF8YV7.js";const g=JSON.parse('{"title":"Python FFI：高效调用 C/C++ 代码的完整指南","description":"本文介绍如何使用 Python 的 FFI (Foreign Function Interface) 来调用 C/C++ 代码，包括调用动态链接库和在 Python 代码中嵌入 C 代码两种方法。FFI 能够提高开发效率，并支持多种编程语言和操作系统。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/python/python通过ffi调用C代码.html"}],["meta",{"property":"og:title","title":"Python FFI：高效调用 C/C++ 代码的完整指南"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/python/python通过ffi调用C代码.html"}],["meta",{"name":"keywords","content":"Python,FFI,C,C++,动态链接库,代码调用,嵌入式,跨语言,CPython,Ruby,Rust,Nodejs,PHP,Java,X86,X86-64,PowerPC,ARM,AArch64,ABI,编译,性能优化"}]]},"headers":[],"relativePath":"t/编程语言/python/python通过ffi调用C代码.md","filePath":"t/编程语言/python/python通过ffi调用C代码.md","lastUpdated":1736299776000}'),k={name:"t/编程语言/python/python通过ffi调用C代码.md"};function d(E,s,o,c,y,F){const n=h("Mermaid");return r(),p("div",null,[s[0]||(s[0]=i("h1",{id:"python-通过-ffi-调用-c-c-代码",tabindex:"-1"},[a("Python 通过 FFI 调用 C/C++ 代码 "),i("a",{class:"header-anchor",href:"#python-通过-ffi-调用-c-c-代码","aria-label":'Permalink to "Python 通过 FFI 调用 C/C++ 代码"'},"​")],-1)),s[1]||(s[1]=i("h1",{id:"动态链接库调用",tabindex:"-1"},[a("动态链接库调用 "),i("a",{class:"header-anchor",href:"#动态链接库调用","aria-label":'Permalink to "动态链接库调用"'},"​")],-1)),s[2]||(s[2]=i("p",null,"确定函数声明和 ABI（二进制接口），就能够确定参数和返回值的传递方式。",-1)),s[3]||(s[3]=i("p",null,"FFI 的传递方式是基于函数声明和 ABI 的固定不变的东西，再加上能够变化的 函数地址、数据，就可以调用这个函数。",-1)),t(n,{id:"mermaid_382ee147",graph:"graph%20TD%3B%0A%20%20%20%20ABI(%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8E%A5%E5%8F%A3ABI)--%3Effi_prep_cif(ffi_prep_cif)%3B%0A%20%20%20%20func_no(%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E)--%3Effi_prep_cif%3B%0A%20%20%20%20ffi_prep_cif--%3Effi_cif(ffi_cif)%0A%20%20%20%20ffi_cif--%3Effi_call%3B%0A%20%20%20%20return_addr(%E8%BF%94%E5%9B%9E%E5%80%BC%E5%9C%B0%E5%9D%80)--%3Effi_call%3B%0A%20%20%20%20args_list(%E5%8F%82%E6%95%B0%E6%95%B0%E6%8D%AE%E6%95%B0%E7%BB%84)--%3Effi_call%3B%0A%20%20%20%20func_addr(%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80)--%3Effi_call(ffi_call)%3B"}),s[4]||(s[4]=e(`<h2 id="编写-c-语言接口" tabindex="-1">编写 C 语言接口 <a class="header-anchor" href="#编写-c-语言接口" aria-label="Permalink to &quot;编写 C 语言接口&quot;">​</a></h2><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ffi_test.cpp</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="编写-python-程序调用动态链接库" tabindex="-1">编写 Python 程序调用动态链接库 <a class="header-anchor" href="#编写-python-程序调用动态链接库" aria-label="Permalink to &quot;编写 Python 程序调用动态链接库&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># test_ffi.py</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cffi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> FFI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FFI()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.cdef(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  int add(int a, int b);</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi.dlopen(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;libffi_test.so&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lib.add(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="代码编译及执行" tabindex="-1">代码编译及执行 <a class="header-anchor" href="#代码编译及执行" aria-label="Permalink to &quot;代码编译及执行&quot;">​</a></h2><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ffi_test.cpp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fPIC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -shared</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libffi_test.so</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test_ffi.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output: 7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h1 id="python-代码中嵌入-c-代码" tabindex="-1">Python 代码中嵌入 C 代码 <a class="header-anchor" href="#python-代码中嵌入-c-代码" aria-label="Permalink to &quot;Python 代码中嵌入 C 代码&quot;">​</a></h1><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cffi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> FFI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FFI()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffi.cdef(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  int add(int a, int b);</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ffi.verify(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  int add(int a,int b){</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    return a+b;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lib.add(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h1><p>通过 FFI 我们可以轻松的在 Python 中嵌入 C/C++ 语言代码，从而避免在 C/C++ 繁琐的编译工具链耗费大量的时间，减少开发成本。</p><p>调用动态链接库，方便我们跨语言复用代码库，不需要在当前语言的基础上再实现一次。</p><p>FFI 支持 CPython、Ruby、Rust、Nodejs、PHP、Java 等，支持大部分的系统架构和操作系统，X86、X86-64、PowerPC、ARM、AArch64 等。</p>`,12))])}const u=l(k,[["render",d]]);export{g as __pageData,u as default};
