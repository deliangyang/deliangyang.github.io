import{_ as l,c as e,a3 as i,o as t}from"./chunks/framework.BOyF8YV7.js";const p=JSON.parse('{"title":"Lua 编程语言学习指南：从虚拟机到标准库","description":"学习Lua编程语言的完整指南，涵盖Lua词法、语法、语义分析、代码生成、Lua虚拟机（基于栈和基于寄存器）、指令集、指令编码、标准库以及关键概念解释（如栈指针、指令指针）。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/lua/index.html"}],["meta",{"property":"og:title","title":"Lua 编程语言学习指南：从虚拟机到标准库"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/lua/index.html"}],["meta",{"name":"keywords","content":"Lua,Lua虚拟机,Lua编译器,Lua标准库,虚拟机,栈,寄存器,指令集,指令编码,词法分析,语法分析,语义分析,代码生成,AST,编译原理,编程语言,sp,ip,pc,stack pointer,instruction pointer"}]]},"headers":[],"relativePath":"t/编程语言/lua/index.md","filePath":"t/编程语言/lua/index.md","lastUpdated":1736299776000}'),o={name:"t/编程语言/lua/index.md"};function r(n,a,u,h,s,d){return t(),e("div",null,a[0]||(a[0]=[i('<h2 id="开始学习-lua" tabindex="-1">开始学习 lua <a class="header-anchor" href="#开始学习-lua" aria-label="Permalink to &quot;开始学习 lua&quot;">​</a></h2><ol><li>lua 的词法、语法解析，语义分析，代码生成 parse 完毕之后等到 AST，一个先进的编译器应该包含趣多的步骤：语义分析，类型检查/推导，代码优化，机器代码生成... <ul><li><a href="https://www.open-open.com/news/view/1b08f92" target="_blank" rel="nofollow noopener noreferrer">王垠：谈谈 Parser</a></li><li><a href="https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/luadec/%E4%BA%91%E9%A3%8E-lua%E6%BA%90%E7%A0%81%E6%AC%A3%E8%B5%8F-lua-5.2.pdf" target="_blank" rel="nofollow noopener noreferrer">风云</a></li></ul></li><li>lua 的 vm 虚拟机</li><li>标准库</li><li>二进制</li></ol><h3 id="想到哪就写到哪里" tabindex="-1">想到哪就写到哪里， <a class="header-anchor" href="#想到哪就写到哪里" aria-label="Permalink to &quot;想到哪就写到哪里，&quot;">​</a></h3><p>通识整个项目，捋清楚思路之后再整理</p><h2 id="lua-虚拟机" tabindex="-1">Lua 虚拟机 <a class="header-anchor" href="#lua-虚拟机" aria-label="Permalink to &quot;Lua 虚拟机&quot;">​</a></h2><p>对计算机的模拟和抽象，虚拟机的实现大致可以分为两类：基于栈和基于寄存器。5.0 以后</p><h3 id="指令集" tabindex="-1">指令集 <a class="header-anchor" href="#指令集" aria-label="Permalink to &quot;指令集&quot;">​</a></h3><ul><li>常量加载指令</li><li>运算符相关指令</li><li>循环和跳转指令</li><li>函数调用相关指令</li><li>表操作指令</li><li>Upvalue 操作指令</li></ul><h3 id="指令的四种编码" tabindex="-1">指令的四种编码 <a class="header-anchor" href="#指令的四种编码" aria-label="Permalink to &quot;指令的四种编码&quot;">​</a></h3><ul><li>iABC -&gt; A、B、C 三个操作数，8、9、9 位</li><li>iABx -&gt; A、Bx 两个操作数，8、18 位</li><li>iAsBx -&gt; A、sBx（有符号的整数），8、18 位</li><li>iAx -&gt; Ax 只携带一个操作数，占用 26bit。</li></ul><h2 id="lua-编译器" tabindex="-1">Lua 编译器 <a class="header-anchor" href="#lua-编译器" aria-label="Permalink to &quot;Lua 编译器&quot;">​</a></h2><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><h2 id="名词解释" tabindex="-1">名词解释 <a class="header-anchor" href="#名词解释" aria-label="Permalink to &quot;名词解释&quot;">​</a></h2><ol><li>sp stack pointer 栈指针</li><li>ip Instruction pointer 指令指针</li><li>pc</li></ol>',14)]))}const m=l(o,[["render",r]]);export{p as __pageData,m as default};
