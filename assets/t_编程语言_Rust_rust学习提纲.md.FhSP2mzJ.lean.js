import{_ as a,c as e,a3 as r,o as l}from"./chunks/framework.BOyF8YV7.js";const m=JSON.parse('{"title":"Rust编程入门：从语法到Web服务器实战","description":"学习Rust编程语言，涵盖Rust语法基础(向量、哈希表、宏、I/O、多线程、网络、GUI和框架)，高级特性(迭代器、闭包、智能指针、并发安全、面向对象、异常处理)，以及如何构建多线程Web服务器等实战项目。深入讲解Rust中的关键概念如`trait`和生命周期，帮助你理解并编写高效安全的Rust代码。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/Rust/rust学习提纲.html"}],["meta",{"property":"og:title","title":"Rust编程入门：从语法到Web服务器实战"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/Rust/rust学习提纲.html"}],["meta",{"name":"keywords","content":"Rust,Rust语法,Cargo,vector,map,宏,I/O,多线程,网络编程,GUI,框架,迭代器,闭包,函数式编程,智能指针,并发安全,面向对象,异常处理,错误处理,trait,生命周期,Web Server,多线程Web Server"}]]},"headers":[],"relativePath":"t/编程语言/Rust/rust学习提纲.md","filePath":"t/编程语言/Rust/rust学习提纲.md","lastUpdated":1736299776000}'),i={name:"t/编程语言/Rust/rust学习提纲.md"};function o(s,t,n,u,h,c){return l(),e("div",null,t[0]||(t[0]=[r('<h3 id="cargo" tabindex="-1">Cargo <a class="header-anchor" href="#cargo" aria-label="Permalink to &quot;Cargo&quot;">​</a></h3><h3 id="rust-语法" tabindex="-1">Rust 语法 <a class="header-anchor" href="#rust-语法" aria-label="Permalink to &quot;Rust 语法&quot;">​</a></h3><ol><li>基础数据结构 <ul><li>集合 vector</li><li>哈希 map</li></ul></li><li>宏！</li><li>I/O</li><li>多线程</li><li>网络</li><li>GUI</li><li>框架</li><li>测试</li></ol><h3 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h3><ol><li>迭代器与闭包，函数式编程</li><li>智能指针</li><li>并发安全</li><li>面向对象</li><li>异常、错误处理</li></ol><h3 id="实现一个自己的程序-如多线程-web-server" tabindex="-1">实现一个自己的程序，如多线程 Web Server <a class="header-anchor" href="#实现一个自己的程序-如多线程-web-server" aria-label="Permalink to &quot;实现一个自己的程序，如多线程 Web Server&quot;">​</a></h3><h3 id="深入研究宏" tabindex="-1">深入研究宏！ <a class="header-anchor" href="#深入研究宏" aria-label="Permalink to &quot;深入研究宏！&quot;">​</a></h3><h3 id="如何阅读" tabindex="-1">如何阅读 <a class="header-anchor" href="#如何阅读" aria-label="Permalink to &quot;如何阅读&quot;">​</a></h3><ol><li>字里行间都需要细读，哪怕是一个单词，都需要弄懂它是什么意思，有什么作用，比如关键词<code>trait</code>，谷歌翻译是特征，特点。 但是在 Rust 里，它就是一个定义泛型行为的方法。它可以与泛型结合起来将泛型限定为拥有特定行为的类型， 而不是任意类型。</li><li>生命周期，方便编译器检查引用的有效性。</li></ol>',9)]))}const b=a(i,[["render",o]]);export{m as __pageData,b as default};
