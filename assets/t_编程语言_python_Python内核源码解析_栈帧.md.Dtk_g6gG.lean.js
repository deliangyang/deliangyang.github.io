import{_ as i,c as a,a3 as n,o as l}from"./chunks/framework.BOyF8YV7.js";const p="/assets/frame-object.CaDtCGlu.png",t="/assets/opcode.BLhmfTa4.png",e="/assets/call-stack.DrN1F_wh.png",o=JSON.parse('{"title":"Python 虚拟机中的栈帧详解：数据结构、生命周期及调用栈","description":"深入探讨 Python 虚拟机中的栈帧 (PyFrameObject) 数据结构，包括其组成部分（局部变量、操作数栈、异常处理信息等）、创建和销毁机制，以及在函数调用和返回过程中的作用。文章还阐述了栈帧链、main 栈帧、调用栈等概念，并结合代码示例和图表，清晰地解释了 Python 代码执行过程中栈帧的运行原理。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/python/Python内核源码解析/栈帧.html"}],["meta",{"property":"og:title","title":"Python 虚拟机中的栈帧详解：数据结构、生命周期及调用栈"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/python/Python内核源码解析/栈帧.html"}],["meta",{"name":"keywords","content":"Python,栈帧,PyFrameObject,虚拟机,数据结构,局部变量,操作数栈,异常处理,代码段,内置符号表,全局符号表,局部符号表,值栈,调用栈,main栈帧,f_back,PyCodeObject,字节码,栈帧链,栈帧创建,栈帧销毁"}]]},"headers":[],"relativePath":"t/编程语言/python/Python内核源码解析/栈帧.md","filePath":"t/编程语言/python/Python内核源码解析/栈帧.md","lastUpdated":1736299776000}'),h={name:"t/编程语言/python/Python内核源码解析/栈帧.md"};function k(r,s,c,E,d,y){return l(),a("div",null,s[0]||(s[0]=[n(`<p>栈帧是 Python 虚拟机执行的载体之一，它是一个数据结构，用于存储代码运行时的数据。每个栈帧都有自己的局部变量、操作数栈、异常处理信息等。栈帧是一个栈结构，每个栈帧都有一个指向上一个栈帧的指针，这样就形成了一个栈帧链。</p><p>栈帧的创建和销毁是由 Python 虚拟机自动完成的，当一个函数被调用时，就会创建一个栈帧，当函数返回时，就会销毁这个栈帧。</p><p>栈帧的数据结构如下：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _frame PyFrameObject;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _frame {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject_VAR_HEAD</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f_back;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* previous frame, or NULL 前一个栈帧 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyCodeObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f_code;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       /* code segment */      // 代码段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f_builtins;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       /* builtin symbol table (PyDictObject) 内置符号表，字典 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f_globals;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* global symbol table (PyDictObject) 全局符号表 字典 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f_locals;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         /* local symbol table (any mapping)  当前作用域 映射 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f_valuestack;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* points after the last local */   // 指向最后一个局部变量的后面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f_trace;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          /* Trace function */    // 跟踪函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f_stackdepth;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           /* Depth of value stack */  // 值栈深度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f_trace_lines;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         /* Emit per-line trace events? */ // 每行跟踪事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f_trace_opcodes;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       /* Emit per-opcode trace events? */ // 每个操作码跟踪事件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* Borrowed reference to a generator, or NULL */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f_gen;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 生成器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f_lasti;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                /* Last instruction if called */    // 最后一条指令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f_lineno;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               /* Current line number. Only valid if non-zero */   // 当前行号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f_iblock;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               /* index in f_blockstack */ // f_blockstack 的索引</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyFrameState f_state;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       /* What state the frame is in 状态 */   // 栈帧的状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyTryBlock </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f_blockstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[CO_MAXBLOCKS];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* for try and loop blocks  */   // try 和 loop 块，长度为 CO_MAXBLOCKS=20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f_localsplus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* locals+stack, dynamically sized */   // 局部变量和栈，动态地长度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>每个栈帧都有自己的数据栈，数据栈的长度是动态的，它的长度是局部变量的数量加上栈帧的深度。局部变量的数量是由代码对象的 co_nlocals 属性决定的，栈帧的深度是由代码对象的 co_stacksize 属性决定的。</p><p><img src="`+p+`" alt="栈帧数据结构"></p><p>f_code 是代码段，它是一个 PyCodeObject 对象，它包含了代码对象的所有信息，包括字节码、常量表、变量名等。</p><p>f_builtins 是内置符号表，它是一个 PyDictObject 对象，它包含了内置函数的名称和函数对象的映射关系。</p><p>f_globals 是全局符号表，它是一个 PyDictObject 对象，它包含了全局变量的名称和变量值的映射关系。</p><p>f_locals 是局部符号表，它是一个 PyDictObject 对象，它包含了局部变量的名称和变量值的映射关系。</p><p>f_valuestack 是值栈，它是一个 PyObject 对象的数组，它包含了局部变量和操作数栈的值。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+t+`" alt="操作码调用"></p><p>Python 的调用栈有多个栈帧组成，一定包含 main 栈帧，main 栈帧是 Python 虚拟机启动时创建的，它的 f_back 指针为 NULL，其它栈帧的 f_back 指针都指向上一个栈帧。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar(b)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>main 栈帧调用 foo 栈帧，foo 栈帧调用 bar 栈帧，bar 栈帧返回到 foo 栈帧，foo 栈帧返回到 main 栈帧。每一个返回都会销毁一个栈帧。程序结束，main 栈帧也会被销毁。</p><p><img src="`+e+'" alt="调用栈"></p>',17)]))}const g=i(h,[["render",k]]);export{o as __pageData,g as default};
