import{_ as a,c as i,a3 as e,o as n}from"./chunks/framework.BOyF8YV7.js";const c=JSON.parse('{"title":"eBPF 技术详解：从原理到实践，涵盖bcc、USDT、内核及用户空间探针","description":"本文介绍了BPF和eBPF的区别、bcc工具集、USDT探针、内核探针(kprobes, kretprobes)、用户空间探针(uprobes, uretprobes)、DWARF调试信息格式以及eBPF在Rust中的应用(aya)。包含了代码示例和工具使用说明，帮助读者理解和应用eBPF技术进行系统追踪和性能分析。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/Linux/动态追踪技术/ebpf.html"}],["meta",{"property":"og:title","title":"eBPF 技术详解：从原理到实践，涵盖bcc、USDT、内核及用户空间探针"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/Linux/动态追踪技术/ebpf.html"}],["meta",{"name":"keywords","content":"eBPF,BPF,bcc,USDT,kprobes,kretprobes,uprobes,uretprobes,DWARF,内核探针,用户空间探针,系统调用,性能监控,调试,tracing,bpftrace,aya,ELF"}]]},"headers":[],"relativePath":"t/Linux/动态追踪技术/ebpf.md","filePath":"t/Linux/动态追踪技术/ebpf.md","lastUpdated":1736299776000}'),l={name:"t/Linux/动态追踪技术/ebpf.md"};function t(p,s,r,h,k,o){return n(),i("div",null,s[0]||(s[0]=[e(`<h2 id="bpf-相关文档" tabindex="-1">BPF 相关文档 <a class="header-anchor" href="#bpf-相关文档" aria-label="Permalink to &quot;BPF 相关文档&quot;">​</a></h2><p><a href="https://docs.kernel.org/bpf/index.html" target="_blank" rel="nofollow noopener noreferrer">https://docs.kernel.org/bpf/index.html</a></p><h3 id="bpf-和-ebpf-的区别" tabindex="-1">BPF 和 eBPF 的区别 <a class="header-anchor" href="#bpf-和-ebpf-的区别" aria-label="Permalink to &quot;BPF 和 eBPF 的区别&quot;">​</a></h3><p><a href="https://docs.kernel.org/bpf/classic_vs_extended.html" target="_blank" rel="nofollow noopener noreferrer">https://docs.kernel.org/bpf/classic_vs_extended.html</a></p><ul><li>寄存器从 2 增加到 10</li><li>寄存器从 32 位增加到 64 位</li><li>判断条件 jt/if 替换为 jt/fall-through</li><li>引入 bpf_call insn 和寄存器传递约定，以实现来自/向其他内核函数的零开销调用</li></ul><h3 id="bcc-就是-bpf-脚本工具集" tabindex="-1">bcc 就是 BPF 脚本工具集 <a class="header-anchor" href="#bcc-就是-bpf-脚本工具集" aria-label="Permalink to &quot;bcc 就是 BPF 脚本工具集&quot;">​</a></h3><p><img src="https://github.com/iovisor/bcc/blob/master/images/bcc_tracing_tools_2019.png?raw=true" alt="https://github.com/iovisor/bcc/blob/master/images/bcc_tracing_tools_2019.png?raw=true"></p><ul><li>手动 clone 源码编译安装，不要使用<code>apt</code>或者<code>yum</code>等命令源安装</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="usdt-probes-user-statically-defined-tracing" tabindex="-1">USDT probes (User Statically-Defined Tracing) <a class="header-anchor" href="#usdt-probes-user-statically-defined-tracing" aria-label="Permalink to &quot;USDT probes (User Statically-Defined Tracing)&quot;">​</a></h3><p>用户静态定义的追踪探测，程序编译时需要开启动态追踪，用户态程序静态定义的跟踪点，类似于内核中的 tracepoint，它需要在程序的源代码中添加代码。编译器会将<code>DTRACE_PROBEXXX</code>这种宏替换为一个 nop 空指令，不做其它的事情，只负责占位，同时编译器会在程序的<code>.note.stapsdt</code>中添加必要的信息。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">std.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DTRACE_PROBE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">usdt, probe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_trace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pt_regs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addr;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bpf_usdt_readarg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ctx, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">addr);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bpf_probe_read_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path), (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)addr);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bpf_trace_printk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, path);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="系统事件" tabindex="-1">系统事件 <a class="header-anchor" href="#系统事件" aria-label="Permalink to &quot;系统事件&quot;">​</a></h2><h2 id="探针" tabindex="-1">探针 <a class="header-anchor" href="#探针" aria-label="Permalink to &quot;探针&quot;">​</a></h2><h3 id="内核探针" tabindex="-1">内核探针 <a class="header-anchor" href="#内核探针" aria-label="Permalink to &quot;内核探针&quot;">​</a></h3><h4 id="kprobes-探针-内核函数入口被调用" tabindex="-1">kprobes 探针，内核函数入口被调用 <a class="header-anchor" href="#kprobes-探针-内核函数入口被调用" aria-label="Permalink to &quot;kprobes 探针，内核函数入口被调用&quot;">​</a></h4><h4 id="kretprobes-探测点在内核函数返回时后被调用" tabindex="-1">kretprobes 探测点在内核函数返回时后被调用 <a class="header-anchor" href="#kretprobes-探测点在内核函数返回时后被调用" aria-label="Permalink to &quot;kretprobes 探测点在内核函数返回时后被调用&quot;">​</a></h4><h3 id="用户空间探针" tabindex="-1">用户空间探针 <a class="header-anchor" href="#用户空间探针" aria-label="Permalink to &quot;用户空间探针&quot;">​</a></h3><h4 id="uprobes-用户空间函数入口探针" tabindex="-1">uprobes 用户空间函数入口探针 <a class="header-anchor" href="#uprobes-用户空间函数入口探针" aria-label="Permalink to &quot;uprobes 用户空间函数入口探针&quot;">​</a></h4><ul><li>需要手动计算进程内存的偏移位置，不可移植</li><li>查看<code>redis-server</code>符号表</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">objdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -tT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/redis-server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># but isn&#39;t work</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/work/go-dev/bcc/tools/trace.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/usr/local/bin/redis-server:createStringObject &quot;%s&quot; arg1&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="查看函数参数" tabindex="-1">查看函数参数 <a class="header-anchor" href="#查看函数参数" aria-label="Permalink to &quot;查看函数参数&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dd@dd-OptiPlex-3020:~$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bpftrace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;uprobe:/usr/local/bin/php:compile_string&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WARNING:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Cannot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DWARF:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libdw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> available</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WARNING:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> No</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DWARF</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/usr/local/bin/php&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cannot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parameter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> info</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uprobe:/usr/local/bin/php:compile_string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="uprobe" tabindex="-1">uprobe <a class="header-anchor" href="#uprobe" aria-label="Permalink to &quot;uprobe&quot;">​</a></h4><ul><li>语法</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>uprobe: arg0, arg1, ..., argN</span></span>
<span class="line"><span>uretprobe: retval</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bpftrace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;uprobe:/lib/x86_64-linux-gnu/libc.so.6:fopen { printf(&quot;fopen: %s\\n&quot;, str(arg0)); }&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Attaching</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> probe...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fopen:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/meminfo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fopen:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/meminfo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="查看追踪点" tabindex="-1">查看追踪点 <a class="header-anchor" href="#查看追踪点" aria-label="Permalink to &quot;查看追踪点&quot;">​</a></h2><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tplist-bpfcc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="ebpf-in-rust" tabindex="-1">eBPF in Rust <a class="header-anchor" href="#ebpf-in-rust" aria-label="Permalink to &quot;eBPF in Rust&quot;">​</a></h2><ul><li>aya</li></ul><h2 id="什么是-dwarf" tabindex="-1">什么是 DWARF？ <a class="header-anchor" href="#什么是-dwarf" aria-label="Permalink to &quot;什么是 DWARF？&quot;">​</a></h2><p>译文来自<a href="https://www.deepl.com/translator" target="_blank" rel="nofollow noopener noreferrer">https://www.deepl.com/translator</a></p><blockquote><p>DWARF is a widely used, standardized debugging data format. DWARF was originally designed along with Executable and Linkable Format (ELF), although it is independent of object file formats.[1] The name is a medieval fantasy complement to &quot;ELF&quot; that had no official meaning, although the backronym &quot;Debugging With Arbitrary Record Formats&quot; has since been proposed.[1]</p></blockquote><blockquote><p>DWARF 是一种广泛使用的、标准化的调试数据格式。DWARF 最初是与可执行和可链接格式（ELF）一起设计的，尽管它独立于对象文件格式。[1]这个名字是对 &quot;ELF &quot;的中世纪幻想的补充，没有正式的含义，尽管后来有人提出了 &quot;用任意记录格式进行调试 &quot;的后缀名。</p></blockquote><h2 id="ebpf-实现原理" tabindex="-1">eBPF 实现原理 <a class="header-anchor" href="#ebpf-实现原理" aria-label="Permalink to &quot;eBPF 实现原理&quot;">​</a></h2><p>todo</p><h2 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h2><ol><li><a href="https://www.ebpf.top/post/ebpf-overview-part-5/" target="_blank" rel="nofollow noopener noreferrer">https://www.ebpf.top/post/ebpf-overview-part-5/</a></li><li><a href="https://github.com/DavadDi/bpf_study" target="_blank" rel="nofollow noopener noreferrer">bpf study</a></li><li><a href="https://github.com/gojue/ebpf-slide/" target="_blank" rel="nofollow noopener noreferrer">PPT</a></li></ol>`,41)]))}const b=a(l,[["render",t]]);export{c as __pageData,b as default};
