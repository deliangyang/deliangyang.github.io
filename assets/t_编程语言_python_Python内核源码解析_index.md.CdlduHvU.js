import{_ as e,c as a,a3 as i,o as t}from"./chunks/framework.BOyF8YV7.js";const p=JSON.parse('{"title":"Python 内核源码深度解析：虚拟机、词法分析与编译原理","description":"深入解析 Python 内核源码，涵盖虚拟机、词法分析 (Token)、语法分析 (Parser) 和编译等核心模块，详细讲解 Grammer、AST、opcode、pyc 等关键概念及自顶向下、自底向上分析等算法。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/python/Python内核源码解析/index.html"}],["meta",{"property":"og:title","title":"Python 内核源码深度解析：虚拟机、词法分析与编译原理"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/python/Python内核源码解析/index.html"}],["meta",{"name":"keywords","content":"Python,内核源码,虚拟机,Grammer,AST,tokenizer,parser,逻辑优化,opcode,pyc,Token,标记语法,词法分析,词法分析器,analyzer-lexer,scanner,Parser,语法分析,语法分析树,抽象语法树,自顶向下分析,自底向上分析,编译,编译器优化,vm"}]]},"headers":[],"relativePath":"t/编程语言/python/Python内核源码解析/index.md","filePath":"t/编程语言/python/Python内核源码解析/index.md","lastUpdated":1736299776000}'),o={name:"t/编程语言/python/Python内核源码解析/index.md"};function r(n,l,h,s,c,d){return t(),a("div",null,l[0]||(l[0]=[i('<h1 id="python-内核源码解析" tabindex="-1">Python 内核源码解析 <a class="header-anchor" href="#python-内核源码解析" aria-label="Permalink to &quot;Python 内核源码解析&quot;">​</a></h1><h2 id="虚拟机" tabindex="-1">虚拟机 <a class="header-anchor" href="#虚拟机" aria-label="Permalink to &quot;虚拟机&quot;">​</a></h2><ul><li>Grammer</li><li>AST <ul><li>tokenizer</li><li>parser</li></ul></li><li>逻辑优化</li><li>opcode</li><li>虚拟机</li><li>pyc</li></ul><h2 id="token" tabindex="-1">Token <a class="header-anchor" href="#token" aria-label="Permalink to &quot;Token&quot;">​</a></h2><ul><li>标记语法</li><li>词法分析 <ul><li>将字符序列转化为标记序列的过程 <ul><li>词法分析器、analyzer-lexer 或者叫 scanner</li></ul></li></ul></li></ul><h2 id="parser" tabindex="-1">Parser <a class="header-anchor" href="#parser" aria-label="Permalink to &quot;Parser&quot;">​</a></h2><ul><li>语法分析</li><li>根据给定的形式文法对有单词序列构成的输入文本进行分析，并确定语法结构的一种过程。</li><li>单词流作为输入。</li><li>语法检查、并构建由输入的单词组成的数据结构。 <ul><li>语法分析树</li><li>抽象语法树</li></ul></li><li>如何从语法的起止符号推导出输入符号串 <ul><li>自顶向下分析 <ul><li>搜索输入符号串的最左推导。单词从左到右依次使用</li></ul></li><li>自底向上分析 <ul><li>根据给定的形式语法规则进行改写，最后改写为语法的起始符号</li></ul></li></ul></li></ul><h2 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译&quot;">​</a></h2><ul><li>编译器优化</li><li>opcode</li><li>vm</li></ul>',9)]))}const m=e(o,[["render",r]]);export{p as __pageData,m as default};
