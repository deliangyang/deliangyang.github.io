import{_ as s,c as i,a3 as e,o as t}from"./chunks/framework.BOyF8YV7.js";const k=JSON.parse('{"title":"XSS跨站脚本攻击详解：类型、原理及防御方案","description":"本文介绍了XSS跨站脚本攻击的两种主要类型：反射型XSS和存储型XSS，并分别阐述了其攻击原理和特点。同时，文章还提供了相应的解决方案，包括数据过滤和转码等有效方法，帮助读者了解并防御XSS攻击。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/信息安全对抗/web安全/XSS.html"}],["meta",{"property":"og:title","title":"XSS跨站脚本攻击详解：类型、原理及防御方案"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/信息安全对抗/web安全/XSS.html"}],["meta",{"name":"keywords","content":"XSS,跨站脚本攻击,跨域脚本攻击,反射型XSS,存储型XSS,XSS攻击类型,XSS解决方案,XSS防御,脚本攻击,URL参数攻击,数据库攻击,过滤,转码"}]]},"headers":[],"relativePath":"t/信息安全对抗/web安全/XSS.md","filePath":"t/信息安全对抗/web安全/XSS.md","lastUpdated":1736299776000}'),l={name:"t/信息安全对抗/web安全/XSS.md"};function n(r,a,h,p,d,o){return t(),i("div",null,a[0]||(a[0]=[e(`<h2 id="xss-跨域脚本攻击" tabindex="-1">XSS 跨域脚本攻击 <a class="header-anchor" href="#xss-跨域脚本攻击" aria-label="Permalink to &quot;XSS 跨域脚本攻击&quot;">​</a></h2><h3 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h3><h4 id="反射型" tabindex="-1">反射型 <a class="header-anchor" href="#反射型" aria-label="Permalink to &quot;反射型&quot;">​</a></h4><ul><li>通过 URL 参数，发起攻击</li><li>当然也可以解决跨域问题，编写代码，构造异步加载 js 文件，可以解决 URL 过长受限的问题</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://example.com?a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;script&gt;alert(1)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $_GET[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="存储型" tabindex="-1">存储型 <a class="header-anchor" href="#存储型" aria-label="Permalink to &quot;存储型&quot;">​</a></h4><ul><li>一次攻击，多次使用，比如攻击脚本存储在服务端数据库，文件中等。</li><li>例如 <ul><li>提交表单数据会存储在数据库中，并且这个数据会展示在页面上。在不解决这个攻击之前，这都是永久存在的 XSS 攻击。被攻击者只要访问了这个页面，就会被遭到攻击</li></ul></li></ul><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><ul><li>过滤</li><li>转码</li></ul>`,10)]))}const u=s(l,[["render",n]]);export{k as __pageData,u as default};
