import{_ as i,c as a,a3 as n,o as l}from"./chunks/framework.BOyF8YV7.js";const g=JSON.parse('{"title":"Rust 生命周期详解：借用检查器、生命周期注解及省略规则","description":"深入讲解 Rust 生命周期 (lifetime) 的概念，包括借用检查器 (borrow checker) 如何工作，如何在函数和结构体中声明和使用生命周期，以及生命周期省略规则 (lifetime elision rules) 的详解，并解释悬空引用 (dangling reference) 的问题。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/Rust/rust-lifetime.html"}],["meta",{"property":"og:title","title":"Rust 生命周期详解：借用检查器、生命周期注解及省略规则"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/Rust/rust-lifetime.html"}],["meta",{"name":"keywords","content":"Rust,lifetime,生命周期,borrow checker,借用检查器,dangling reference,悬空引用,引用,作用域,函数生命周期,结构体生命周期,生命周期省略,lifetime elision rules"}]]},"headers":[],"relativePath":"t/编程语言/Rust/rust-lifetime.md","filePath":"t/编程语言/Rust/rust-lifetime.md","lastUpdated":1736299776000}'),e={name:"t/编程语言/Rust/rust-lifetime.md"};function t(h,s,p,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="rust-lifetime-生命周期" tabindex="-1">Rust lifetime 生命周期 <a class="header-anchor" href="#rust-lifetime-生命周期" aria-label="Permalink to &quot;Rust lifetime 生命周期&quot;">​</a></h2><ul><li>变量的生命周期局限在作用域内，如果要在作用域之外使用改变了，那么我们就需要标注？</li></ul><h3 id="borrow-checker-借用检查器" tabindex="-1">Borrow Checker 借用检查器 <a class="header-anchor" href="#borrow-checker-借用检查器" aria-label="Permalink to &quot;Borrow Checker 借用检查器&quot;">​</a></h3><h4 id="代码块" tabindex="-1">代码块 <a class="header-anchor" href="#代码块" aria-label="Permalink to &quot;代码块&quot;">​</a></h4><p>Rust 编译器会在编译的时候比较作用域变量的生命周期。 Rust 官方文档中有如下示例：</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r;                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ---------+-- &#39;a</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                          //          |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {                     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -+-- &#39;b  |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x;           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  |       |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }                     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -+       |</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                          //          |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;r: {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>从中我们可以看出，里面括号里的代码块，变量 x 的作用域局限在里面的括号里，所以它的生命周期明显只有在这个括号里，对比变量 r，r 的生命周期要比 x 长，这个时候又将 x 的引用赋值给 r，编译器会报错，因为后面的<code>println!(&quot;r: {}&quot;, r);</code>打印的 r，其实是 x。</p><h3 id="在函数中分配生命周期" tabindex="-1">在函数中分配生命周期 <a class="header-anchor" href="#在函数中分配生命周期" aria-label="Permalink to &quot;在函数中分配生命周期&quot;">​</a></h3><p>函数传参数，参数为引用，为什么要传引用呢？不想让函数拥有参数的所有权。</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 这是一个引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i32</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // 这是一个有着详细生命周期的引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> mut</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i32</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 这是一个有着详细生命周期的可变引用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> longest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误案例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> longest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;really long string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">as_str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>为什么的个函数<code>longest</code>会报错呢？原因是 result 的生命周期要比<code>&#39;a</code>短。</p><h3 id="在结构体定义里标记生命周期" tabindex="-1">在结构体定义里标记生命周期 <a class="header-anchor" href="#在结构体定义里标记生命周期" aria-label="Permalink to &quot;在结构体定义里标记生命周期&quot;">​</a></h3><h4 id="哪些规则不需要为引用声明生命周期-lifetime-elision-rules-生命周期省略" tabindex="-1">哪些规则不需要为引用声明生命周期（lifetime elision rules）生命周期省略 <a class="header-anchor" href="#哪些规则不需要为引用声明生命周期-lifetime-elision-rules-生命周期省略" aria-label="Permalink to &quot;哪些规则不需要为引用声明生命周期（lifetime elision rules）生命周期省略&quot;">​</a></h4><ul><li>每一个引用都有一个生命周期</li><li>在函数或者方法参数中，生命周期被称作输入生命周期，相反，返回值的被称作输出生命周期。</li></ul><h4 id="生命周期省略规则" tabindex="-1">生命周期省略规则 <a class="header-anchor" href="#生命周期省略规则" aria-label="Permalink to &quot;生命周期省略规则&quot;">​</a></h4><blockquote><p>第一条适用于输入生命周期，后面两条则适用于输出生命周期。适用于<code>fn</code>和<code>impl</code>块。只有满足如下三点，就可以不用声明生命周期。</p></blockquote><ol><li>每一个引用参数都有自己的一个生命周期。</li><li>如果只有一个输入生命周期参数，那么它被赋予所有输出生命周期参数。</li><li>多个输入生命周期参数，<code>&amp;self</code>或<code>&amp;mult self</code>，self 的生命周期被赋给所有输出生命周期参数。</li></ol><ul><li>the dangling reference <ul><li>未标注的引用</li></ul></li></ul>`,18)]))}const c=i(e,[["render",t]]);export{g as __pageData,c as default};
