import{_ as n,c as e,a3 as s,o as l}from"./chunks/framework.BOyF8YV7.js";const u=JSON.parse('{"title":"滑动窗口算法详解：原理、应用及TCP协议中的实现","description":"滑动窗口算法是一种用于网络传输的流量控制技术，它允许发送方在等待确认之前发送多个数据分组，提高网络吞吐量并避免拥塞。本文介绍了滑动窗口算法的作用、原理以及在TCP协议中的应用，并分析了窗口大小调整和特殊情况下的处理。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/网络编程/滑动窗口.html"}],["meta",{"property":"og:title","title":"滑动窗口算法详解：原理、应用及TCP协议中的实现"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/网络编程/滑动窗口.html"}],["meta",{"name":"keywords","content":"滑动窗口,滑动窗口算法,流量控制,TCP,网络传输,拥塞控制,窗口大小,确认应答,数据分组,吞吐量,缓冲区,紧急数据"}]]},"headers":[],"relativePath":"t/网络编程/滑动窗口.md","filePath":"t/网络编程/滑动窗口.md","lastUpdated":1736299776000}'),t={name:"t/网络编程/滑动窗口.md"};function i(p,a,r,c,o,d){return l(),e("div",null,a[0]||(a[0]=[s(`<h2 id="滑动窗口算法" tabindex="-1">滑动窗口算法 <a class="header-anchor" href="#滑动窗口算法" aria-label="Permalink to &quot;滑动窗口算法&quot;">​</a></h2><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h3><ul><li>流量控制技术、确认、差错控制</li><li>网络传输时进行流量控制，避免拥塞的发生</li><li>允许发送方在停止并等待确认前发送多个数据分组，发送方不必每发送一个组就停下来等待确认，因此该协议也可以加速数据的传输，提高网络的吞吐</li><li>窗口的大小可以调整，也可以固定窗口的大小</li><li>容许发送方在接收任何应答之前传一个附加包，<code>接收方</code>告诉<code>发送方</code>在某一个时刻能发送多少包，即窗口尺寸（接收方缓冲区大小） <ul><li>窗口大小为 0 一般不能再发送数据了，两种情况例外 <ol><li>发送紧急数据，用户终止终端机上运行的进程</li><li>发送方可以发送一个<code>1字节的数据报</code>来告知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小</li></ol></li></ul></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>191	7.689877	192.168.3.11	42.192.78.57	TCP	66	[TCP Window Update] 52976 → 80 [ACK] Seq=81 Ack=62759 Win=131072 Len=0 TSval=996544794 TSecr=3658302367</span></span>
<span class="line"><span></span></span>
<span class="line"><span>0000   82 11 8f 51 9e 64 a4 5e 60 f2 a0 49 08 00 45 00</span></span>
<span class="line"><span>0010   00 34 00 00 40 00 40 06 fe 17 c0 a8 03 0b 2a c0</span></span>
<span class="line"><span>0020   4e 39 ce f0 00 50 55 38 e9 2a 60 db e0 34 80 10</span></span>
<span class="line"><span>0030   08 00 79 2f 00 00 01 01 08 0a 3b 66 11 1a da 0d</span></span>
<span class="line"><span>0040   43 9f</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,4)]))}const b=n(t,[["render",i]]);export{u as __pageData,b as default};
