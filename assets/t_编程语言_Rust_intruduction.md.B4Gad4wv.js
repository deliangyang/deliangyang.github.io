import{_ as a,c as n,a3 as e,o as l}from"./chunks/framework.BOyF8YV7.js";const c=JSON.parse('{"title":"Rust 语言入门：从官方文档到 Hello World","description":"学习 Rust 编程语言的完整指南，从安装 Rust 和设置开发环境开始，通过官方文档学习，并构建第一个“Hello World”程序，涵盖 Cargo 包管理工具的使用、Rustc 编译器的应用以及宏的简要介绍。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/Rust/intruduction.html"}],["meta",{"property":"og:title","title":"Rust 语言入门：从官方文档到 Hello World"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/Rust/intruduction.html"}],["meta",{"name":"keywords","content":"Rust,Rust-lang,Rust入门,Rust教程,Rust安装,Cargo,Rustc,HelloWorld,官方文档,编程语言,高性能,可靠性,内存安全,线程安全,IDE,IntelliJ,rustup,println!,宏,package manager"}]]},"headers":[],"relativePath":"t/编程语言/Rust/intruduction.md","filePath":"t/编程语言/Rust/intruduction.md","lastUpdated":1736299776000}'),i={name:"t/编程语言/Rust/intruduction.md"};function t(r,s,o,p,h,u){return l(),n("div",null,s[0]||(s[0]=[e(`<h3 id="如何入门-rust-lang-从官方文档阅读开始" tabindex="-1">如何入门 rust-lang，从官方文档阅读开始 <a class="header-anchor" href="#如何入门-rust-lang-从官方文档阅读开始" aria-label="Permalink to &quot;如何入门 rust-lang，从官方文档阅读开始&quot;">​</a></h3><p>为什么要学习 Rust？Rust 学习曲线高，入门也不简单，看看 Rust 的自荐。</p><blockquote><p>一门赋予每个人<br> 构建可靠且高效软件能力的语言。</p></blockquote><ol><li>高性能 <ul><li>Rust 速度惊人且内存利用率极高。由于没有运行时和垃圾回收，它能够胜任对性能要求特别高的服务，可以在嵌入式设备上运行，还能轻松和其他语言集成。</li></ul></li><li>可靠性 <ul><li>Rust 丰富的类型系统和所有权模型保证了内存安全和线程安全，让您在编译期就能够消除各种各样的错误。</li></ul></li><li>生产力 <ul><li>Rust 拥有出色的文档、友好的编译器和清晰的错误提示信息，还集成了一流的工具 —— 包管理器和构建工具，智能地自动补全和类型检验的多编辑器支持，以及自动格式化代码等等。</li></ul></li></ol><h4 id="官方文档" tabindex="-1">官方文档 <a class="header-anchor" href="#官方文档" aria-label="Permalink to &quot;官方文档&quot;">​</a></h4><ul><li><a href="https://www.rust-lang.org/zh-CN/" target="_blank" rel="nofollow noopener noreferrer">中文文档</a></li><li><a href="https://www.rust-lang.org/learn" target="_blank" rel="nofollow noopener noreferrer">英文文档</a></li></ul><h4 id="安装-rust-lang-ide" tabindex="-1">安装 rust-lang IDE <a class="header-anchor" href="#安装-rust-lang-ide" aria-label="Permalink to &quot;安装 rust-lang IDE&quot;">​</a></h4><p>Jetbrains 是一家开发 IDE 的公司，旗下有很多优秀的 IDE，phpstorm、goland、webstore、pyCharm 等，今天我们要用到的是 Intellij，然后我们可以在他的插件管理器中下载 rust 的插件，安装完毕之后，我们可以重启 IDE，创建 rust 应用程序。</p><p>如果需要研究阅读插件的源代码，跟进插件的特性，可以<a href="https://intellij-rust.github.io/" target="_blank" rel="nofollow noopener noreferrer">在 github 上</a>讨论。</p><h4 id="关于-rust-lang-的环境配置" tabindex="-1">关于 rust-lang 的环境配置 <a class="header-anchor" href="#关于-rust-lang-的环境配置" aria-label="Permalink to &quot;关于 rust-lang 的环境配置&quot;">​</a></h4><p>官方提供了很优秀的解决方案，<a href="https://www.rust-lang.org/tools/install" target="_blank" rel="nofollow noopener noreferrer">Install Rust</a>，不知道从什么时候开始，学习东西喜欢从它的官方文档先开始研究。</p><blockquote><p>It looks like you’re running macOS, Linux, or another Unix-like OS. To download Rustup and install Rust, run the following in your terminal, then follow the on-screen instructions. 官方提供的方法其实很简单，是一个自动化安装的 shell 脚本，curl 下载 shell 脚本，一键部署安装环境，十分的简单方便。</p></blockquote><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://sh.rustup.rs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sSf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="阅读文档-从hello-world程序开始我们的-rust" tabindex="-1">阅读文档，从<code>Hello world</code>程序开始我们的 rust <a class="header-anchor" href="#阅读文档-从hello-world程序开始我们的-rust" aria-label="Permalink to &quot;阅读文档，从\`Hello world\`程序开始我们的 rust&quot;">​</a></h4><p>开始我们的 rust<code>hello world</code>程序之旅，不得不提一下 cargo，rust 的包管理工具（Rust&#39;s package manager）。</p><h5 id="首先我们需要通过cargo创建一个-rust-的项目" tabindex="-1">首先我们需要通过<code>cargo</code>创建一个 rust 的项目 <a class="header-anchor" href="#首先我们需要通过cargo创建一个-rust-的项目" aria-label="Permalink to &quot;首先我们需要通过\`cargo\`创建一个 rust 的项目&quot;">​</a></h5><p>在命令行执行<code>cargo new hello-world</code>，然后 cargo 管理器就为我们创建了一个 hello-world 的目录，这个目录如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── Cargo.lock</span></span>
<span class="line"><span>├── Cargo.toml</span></span>
<span class="line"><span>└── src</span></span>
<span class="line"><span>    └── main.rs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其实<code>cargo new</code>，会直接给我们自动生成一个 hello world 的程序，代码如下</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后我们只需要执行如下脚本，cargo 会帮我们自动生成可执行文件，并且执行输出结果。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   Compiling hello-demo v0.1.0 (/Users/demo/project/hello-demo)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#    Finished dev [unoptimized + debuginfo] target(s) in 0.78s</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     Running \`target/debug/hello-demo\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   Hello world</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="使用-rustc-编译-rs-文件" tabindex="-1">使用 Rustc 编译.rs 文件 <a class="header-anchor" href="#使用-rustc-编译-rs-文件" aria-label="Permalink to &quot;使用 Rustc 编译.rs 文件&quot;">​</a></h5><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rustc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/main.rs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Hello world</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="rust-helloworld-程序分析" tabindex="-1">Rust HelloWorld 程序分析 <a class="header-anchor" href="#rust-helloworld-程序分析" aria-label="Permalink to &quot;Rust HelloWorld 程序分析&quot;">​</a></h3><p>Rust 可执行程序一定需要一个入口文件，和 C/C++ 一样，需要一个<code>manin</code>函数，关键词<code>fn</code>表示函数，宏<code>println!</code>可以帮助我们打印输出。 为什么说长得像函数的<code>println!</code>是宏，如果你观察仔细的话，你会发现宏是在函数后面增加了一个感叹号<code>!</code>，这个标识标识它就是宏。 关于宏的介绍，后面我会弄个专栏来介绍它。宏不管是在 C 还是 Rust 中，都十分的强大。相信你也会喜欢这门语言的。</p><h3 id="学习案例" tabindex="-1">学习案例 <a class="header-anchor" href="#学习案例" aria-label="Permalink to &quot;学习案例&quot;">​</a></h3><ol><li><a href="https://github.com/deliangyang/test-work" target="_blank" rel="nofollow noopener noreferrer">test-work</a></li><li><a href="https://github.com/deliangyang/rust-demo" target="_blank" rel="nofollow noopener noreferrer">rust-demo</a></li><li><a href="https://github.com/deliangyang/leetcode.rs" target="_blank" rel="nofollow noopener noreferrer">leetcode</a></li></ol>`,28)]))}const g=a(i,[["render",t]]);export{c as __pageData,g as default};
