import{_ as e,c as a,a3 as t,o as r}from"./chunks/framework.BOyF8YV7.js";const P=JSON.parse('{"title":"Go 语言 GMP 模型详解：M、P、Goroutine 之间的协作机制","description":"深入了解 Go 语言的 GMP 模型：M (Machine) 为内核线程，P (Processor) 管理 Goroutine 的执行上下文，Goroutine 则是并发执行代码的封装。本文详细解释了它们之间的关系和协同工作方式，帮助您理解 Go 并发机制的核心概念。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/编程语言/golang/GMP模型.html"}],["meta",{"property":"og:title","title":"Go 语言 GMP 模型详解：M、P、Goroutine 之间的协作机制"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/编程语言/golang/GMP模型.html"}],["meta",{"name":"keywords","content":"GMP 模型,Goroutine,M (Machine),P (Processor),Go 协程,并发编程,内核线程,工作线程,Go 运行时,Go 并发模型"}]]},"headers":[],"relativePath":"t/编程语言/golang/GMP模型.md","filePath":"t/编程语言/golang/GMP模型.md","lastUpdated":1736299776000}'),n={name:"t/编程语言/golang/GMP模型.md"};function i(l,o,c,s,h,u){return r(),a("div",null,o[0]||(o[0]=[t('<h2 id="gmp-模型" tabindex="-1">GMP 模型 <a class="header-anchor" href="#gmp-模型" aria-label="Permalink to &quot;GMP 模型&quot;">​</a></h2><h3 id="m-machine" tabindex="-1">M Machine <a class="header-anchor" href="#m-machine" aria-label="Permalink to &quot;M Machine&quot;">​</a></h3><ul><li>Goroutine 实际运行载体，一个 M 表示一个内核线程，有时候也叫工作线程</li><li>不仅运行现有的任务，也会主动到其他的队列中寻找可运行的 G，尽可能的不让自己闲下来</li></ul><h3 id="p-processor" tabindex="-1">P Processor <a class="header-anchor" href="#p-processor" aria-label="Permalink to &quot;P Processor&quot;">​</a></h3><ul><li>管理 G 对象和为运行提供“上下文”，其内部包含两个队列，一个是可运行的 G 队列，一个则是自由 G 列表</li><li>M 与一个 P 关联了才能执行 Go 代码</li></ul><h3 id="goroutine" tabindex="-1">Goroutine <a class="header-anchor" href="#goroutine" aria-label="Permalink to &quot;Goroutine&quot;">​</a></h3><ul><li>对一段需要并发执行代码的封装</li></ul>',7)]))}const d=e(n,[["render",i]]);export{P as __pageData,d as default};
