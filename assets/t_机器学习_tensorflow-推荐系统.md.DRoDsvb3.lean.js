import{_ as i,c as a,a3 as n,o as l}from"./chunks/framework.BOyF8YV7.js";const E=JSON.parse('{"title":"基于 TensorFlow 的推荐系统构建与实践","description":"本文介绍了如何使用TensorFlow构建推荐系统，涵盖用户数据收集、协同过滤算法(用户协同过滤、基于物品的协同过滤，以及余弦相似度和欧几里得距离的计算)、TensorFlow实践(数据准备、清洗、特征提取、模型构建)，以及实时引擎的构建和优化，并结合视频推荐场景，深入探讨了构建个性化推荐系统的策略和方法。文中包含了代码示例和相关资源链接。","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://blog.ranchulin.com/t/机器学习/tensorflow-推荐系统.html"}],["meta",{"property":"og:title","title":"基于 TensorFlow 的推荐系统构建与实践"}],["meta",{"property":"og:url","content":"https://blog.ranchulin.com/t/机器学习/tensorflow-推荐系统.html"}],["meta",{"name":"keywords","content":"TensorFlow,推荐系统,协同过滤,用户协同过滤,基于物品的协同过滤,余弦相似度,欧几里得距离,数据清洗,特征提取,实时引擎,分布式训练,TFRecord,tf.Example,TensorNet,TensorFlow.js,Flink,视频推荐,个性化推荐,机器学习,深度学习"}]]},"headers":[],"relativePath":"t/机器学习/tensorflow-推荐系统.md","filePath":"t/机器学习/tensorflow-推荐系统.md","lastUpdated":1736299776000}'),e={name:"t/机器学习/tensorflow-推荐系统.md"};function t(r,s,p,h,k,o){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="tensorflow-推荐系统" tabindex="-1">tensorflow 推荐系统 <a class="header-anchor" href="#tensorflow-推荐系统" aria-label="Permalink to &quot;tensorflow 推荐系统&quot;">​</a></h2><h3 id="用户数据收集" tabindex="-1">用户数据收集 <a class="header-anchor" href="#用户数据收集" aria-label="Permalink to &quot;用户数据收集&quot;">​</a></h3><ol><li>收集用户数据，这些数据能反映用户的某些偏好，通过分析用户的行为评分数据进行推荐 <ul><li>行为分组</li><li>行为加权</li><li>减噪和归一化</li></ul></li></ol><h3 id="协同过滤算法" tabindex="-1">协同过滤算法 <a class="header-anchor" href="#协同过滤算法" aria-label="Permalink to &quot;协同过滤算法&quot;">​</a></h3><ul><li>算法 <ul><li>用户的协同过滤</li><li>基于物品的协同过滤</li></ul></li><li>欧几里得距离，相似度计算 <ul><li>欧式距离越小、相似度越小</li></ul></li><li>余弦相似，分词向量法，判断文本的相似度 <ul><li>余弦值为 0，表示文本的相似度低</li><li>余弦值接近 1，表示文本的相似度越高</li><li>余弦值接近 -1，表示文本相似度负相关</li></ul></li></ul><h3 id="tensorflow-实践" tabindex="-1">Tensorflow 实践 <a class="header-anchor" href="#tensorflow-实践" aria-label="Permalink to &quot;Tensorflow 实践&quot;">​</a></h3><ol><li>数据准备，用户行为数据</li><li>数据清洗，去除噪点</li><li>提取特征</li><li>建立数据及评分矩阵</li><li>构建模型</li></ol><h2 id="实时引擎" tabindex="-1">实时引擎 <a class="header-anchor" href="#实时引擎" aria-label="Permalink to &quot;实时引擎&quot;">​</a></h2><ul><li><a href="https://www.tensorflow.org/guide/data_performance#the_dataset" target="_blank" rel="nofollow noopener noreferrer">data_performance</a></li><li><a href="https://www.tensorflow.org/tutorials/load_data/tfrecord" target="_blank" rel="nofollow noopener noreferrer">TFRecord 和 tf.Example</a></li><li><a href="https://www.oreilly.com/content/distributed-tensorflow/" target="_blank" rel="nofollow noopener noreferrer">分布式训练</a></li><li><a href="https://www.tensorflow.org/guide/distributed_training" target="_blank" rel="nofollow noopener noreferrer">Tensorflow 分布式训练</a></li><li><a href="https://reposhub.com/python/deep-learning/Qihoo360-tensornet.html" target="_blank" rel="nofollow noopener noreferrer">TensorNet 是一个构建在 TensorFlow 之上针对广告推荐等大规模稀疏场景优化的分布式训练框架</a></li><li><a href="https://blog.csdn.net/fenglepeng/article/details/105535061" target="_blank" rel="nofollow noopener noreferrer">TensorFlow 分布式 Demo</a></li><li><a href="https://github.com/TsingJyujing/tf.js-on-flink" target="_blank" rel="nofollow noopener noreferrer">Tensorflow.js Flink 实践</a></li><li><a href="https://zhuanlan.zhihu.com/p/55638891" target="_blank" rel="nofollow noopener noreferrer">实时数据流上的机器学习——Tensorflow on Flink</a></li></ul><h2 id="tensorflow-demo" tabindex="-1">tensorflow demo <a class="header-anchor" href="#tensorflow-demo" aria-label="Permalink to &quot;tensorflow demo&quot;">​</a></h2><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tensorflow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 加载数据集</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mnist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tf.keras.datasets.mnist</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 载入并准备好 MNIST 数据集。将样本从整数转换为浮点数：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_train, y_train), (x_test, y_test) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mnist.load_data()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x_train, x_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x_train </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将模型的各层堆叠起来，以搭建 tf.keras.Sequential 模型。为训练选择优化器和损失函数：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tf.keras.models.Sequential([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tf.keras.layers.Flatten(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input_shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tf.keras.layers.Dense(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">activation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;relu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tf.keras.layers.Dropout(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tf.keras.layers.Dense(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">activation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;softmax&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model.compile(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">optimizer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;adam&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">              loss</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sparse_categorical_crossentropy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">              metrics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;accuracy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 训练并验证模型：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model.fit(x_train, y_train, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">epochs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model.evaluate(x_test,  y_test, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 结果预测</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model.predict(x_test, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">batch_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="视频推荐" tabindex="-1">视频推荐 <a class="header-anchor" href="#视频推荐" aria-label="Permalink to &quot;视频推荐&quot;">​</a></h2><ul><li>建立关键词库、个性化标签库</li><li>视频上传，用户打 tag（描述提取关键词）</li><li>后台 tag 校正、后台打 tag</li><li>设置标签库、用户设置标签</li><li>收集用户的关注、用户的浏览、用户的评论（提取关键词），计算相似度，推荐</li><li>热门推荐</li><li>已下发过滤、去重</li><li>等等</li><li>零起点推荐 <ul><li>一开始需要准备大量的数据，如果单靠用户上传视频，很可能玩到最后就没数据了</li><li>刚注册的用户可能什么都没有 <ul><li>推荐一些热门的关注</li><li>推荐一些热门的视频</li><li>让用户设置个性化标签、年龄、性别等</li></ul></li></ul></li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ol><li><a href="https://blog.csdn.net/Oscar6280868/article/details/80952945" target="_blank" rel="nofollow noopener noreferrer">Tensorflow 构建推荐系统</a></li><li><a href="https://github.com/tensorflow/io#tensorflow-io" target="_blank" rel="nofollow noopener noreferrer">Tensorflow io</a></li></ol>`,15)]))}const c=i(e,[["render",t]]);export{E as __pageData,c as default};
